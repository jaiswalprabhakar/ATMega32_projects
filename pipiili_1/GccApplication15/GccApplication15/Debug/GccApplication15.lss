
GccApplication15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000607  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053c  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036e  00000000  00000000  00000f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000308  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  74:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <get_ir_state>:
#include <avr/sfr_defs.h>
#include <util/delay.h>
int ir1,ir2,ir3,ir4,ir5;
int count = 0;
void get_ir_state(){
	ir1 = bit_is_clear(PIND,3);
  7c:	90 b3       	in	r25, 0x10	; 16
  7e:	96 95       	lsr	r25
  80:	96 95       	lsr	r25
  82:	96 95       	lsr	r25
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	98 27       	eor	r25, r24
  88:	91 70       	andi	r25, 0x01	; 1
  8a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <ir1>
  8e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ir1+0x1>
	ir2 = bit_is_clear(PIND,4);
  92:	90 b3       	in	r25, 0x10	; 16
  94:	92 95       	swap	r25
  96:	9f 70       	andi	r25, 0x0F	; 15
  98:	98 27       	eor	r25, r24
  9a:	91 70       	andi	r25, 0x01	; 1
  9c:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ir2>
  a0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ir2+0x1>
	ir3 = bit_is_clear(PIND,5);
  a4:	90 b3       	in	r25, 0x10	; 16
  a6:	92 95       	swap	r25
  a8:	96 95       	lsr	r25
  aa:	97 70       	andi	r25, 0x07	; 7
  ac:	98 27       	eor	r25, r24
  ae:	91 70       	andi	r25, 0x01	; 1
  b0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <ir3>
  b4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ir3+0x1>
	ir4 = bit_is_clear(PIND,2);
  b8:	90 b3       	in	r25, 0x10	; 16
  ba:	96 95       	lsr	r25
  bc:	96 95       	lsr	r25
  be:	98 27       	eor	r25, r24
  c0:	91 70       	andi	r25, 0x01	; 1
  c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	ir5 = bit_is_clear(PIND,6);
  ca:	90 b3       	in	r25, 0x10	; 16
  cc:	92 95       	swap	r25
  ce:	96 95       	lsr	r25
  d0:	96 95       	lsr	r25
  d2:	93 70       	andi	r25, 0x03	; 3
  d4:	89 27       	eor	r24, r25
  d6:	81 70       	andi	r24, 0x01	; 1
  d8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ir5>
  dc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ir5+0x1>
  e0:	08 95       	ret

000000e2 <main>:
	
}

int main()
{
	DDRA = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  e6:	11 ba       	out	0x11, r1	; 17
			if((ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4==1 && ir5 ==1))
			{	
				PORTA = 0b10000000; // 
			}
			if(ir1 == 0 && ir2 == 0 && ir3 == 0 && ir4 == 0 && ir5 == 0){
				PORTA = 0b10100000;
  e8:	10 ea       	ldi	r17, 0xA0	; 160
			if(ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0){
				PORTA = 0b10100000;
			}
			if((ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4==1 && ir5 ==1))
			{	
				PORTA = 0b10000000; // 
  ea:	c0 e8       	ldi	r28, 0x80	; 128
			
			if(ir1 == 1 && ir2 == 1 && ir3 == 0)
			PORTA = 0b10000000;
			
			if(ir1 == 0 && ir2 == 1 && ir3 == 1)
			PORTA = 0b00100000;
  ec:	d0 e2       	ldi	r29, 0x20	; 32
{
	DDRA = 0xFF;
	DDRD = 0x00;
	
	while(1){
			ir1 = ir2 = ir3 = ir4 = ir5 = 0;
  ee:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ir5+0x1>
  f2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ir5>
  f6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  fe:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ir3+0x1>
 102:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ir3>
 106:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ir2+0x1>
 10a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ir2>
 10e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ir1+0x1>
 112:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <ir1>
			
		get_ir_state();
 116:	0e 94 3e 00 	call	0x7c	; 0x7c <get_ir_state>
			
			
			if((ir1 == 0 && ir2 == 1 && ir3 == 0)){
 11a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 11e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 122:	89 2b       	or	r24, r25
 124:	09 f0       	breq	.+2      	; 0x128 <main+0x46>
 126:	ce c0       	rjmp	.+412    	; 0x2c4 <main+0x1e2>
 128:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ir2>
 12c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ir2+0x1>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	09 f5       	brne	.+66     	; 0x176 <main+0x94>
 134:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ir3>
 138:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ir3+0x1>
 13c:	89 2b       	or	r24, r25
 13e:	d9 f4       	brne	.+54     	; 0x176 <main+0x94>
				PORTA = 0b10100000;
 140:	1b bb       	out	0x1b, r17	; 27
			}
			if((ir1 == 1 && ir2 == 0 && ir3 == 0)){
 142:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 146:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	69 f4       	brne	.+26     	; 0x168 <main+0x86>
 14e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ir2>
 152:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ir2+0x1>
 156:	89 2b       	or	r24, r25
 158:	09 f5       	brne	.+66     	; 0x19c <main+0xba>
 15a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ir3>
 15e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ir3+0x1>
 162:	89 2b       	or	r24, r25
 164:	d9 f4       	brne	.+54     	; 0x19c <main+0xba>
				PORTA = 0b10000000;
 166:	cb bb       	out	0x1b, r28	; 27
			}
			if((ir1 == 0 && ir2 == 0 && ir3 == 1)){
 168:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 16c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 170:	00 97       	sbiw	r24, 0x00	; 0
 172:	09 f0       	breq	.+2      	; 0x176 <main+0x94>
 174:	9f c0       	rjmp	.+318    	; 0x2b4 <main+0x1d2>
 176:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ir2>
 17a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ir2+0x1>
 17e:	89 2b       	or	r24, r25
 180:	11 f5       	brne	.+68     	; 0x1c6 <main+0xe4>
 182:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ir3>
 186:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ir3+0x1>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	e1 f4       	brne	.+56     	; 0x1c6 <main+0xe4>
				PORTA = 0b00100000;
 18e:	db bb       	out	0x1b, r29	; 27
			}
			
			if(ir1 == 1 && ir2 == 1 && ir3 == 0)
 190:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 194:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	71 f4       	brne	.+28     	; 0x1b8 <main+0xd6>
 19c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ir2>
 1a0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ir2+0x1>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f4       	brne	.+60     	; 0x1e4 <main+0x102>
 1a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ir3>
 1ac:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ir3+0x1>
 1b0:	89 2b       	or	r24, r25
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <main+0xd4>
 1b4:	96 c0       	rjmp	.+300    	; 0x2e2 <main+0x200>
			PORTA = 0b10000000;
 1b6:	cb bb       	out	0x1b, r28	; 27
			
			if(ir1 == 0 && ir2 == 1 && ir3 == 1)
 1b8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 1bc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 1c0:	89 2b       	or	r24, r25
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <main+0xe4>
 1c4:	86 c0       	rjmp	.+268    	; 0x2d2 <main+0x1f0>
 1c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ir2>
 1ca:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ir2+0x1>
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <main+0xf2>
 1d2:	4b c0       	rjmp	.+150    	; 0x26a <main+0x188>
 1d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ir3>
 1d8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ir3+0x1>
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	09 f0       	breq	.+2      	; 0x1e2 <main+0x100>
 1e0:	44 c0       	rjmp	.+136    	; 0x26a <main+0x188>
			PORTA = 0b00100000;
 1e2:	db bb       	out	0x1b, r29	; 27
			
			if(ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0){
 1e4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 1e8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	e9 f5       	brne	.+122    	; 0x26a <main+0x188>
 1f0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ir2>
 1f4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ir2+0x1>
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <main+0x11c>
 1fc:	78 cf       	rjmp	.-272    	; 0xee <main+0xc>
 1fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ir3>
 202:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ir3+0x1>
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	d1 f4       	brne	.+52     	; 0x23e <main+0x15c>
 20a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 212:	89 2b       	or	r24, r25
 214:	a1 f4       	brne	.+40     	; 0x23e <main+0x15c>
 216:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ir5>
 21a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ir5+0x1>
 21e:	89 2b       	or	r24, r25
 220:	71 f4       	brne	.+28     	; 0x23e <main+0x15c>
				PORTA = 0b10100000;
 222:	1b bb       	out	0x1b, r17	; 27
			}
			if((ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4==1 && ir5 ==1))
 224:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 228:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	e9 f4       	brne	.+58     	; 0x26a <main+0x188>
 230:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ir2>
 234:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ir2+0x1>
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	09 f0       	breq	.+2      	; 0x23e <main+0x15c>
 23c:	58 cf       	rjmp	.-336    	; 0xee <main+0xc>
 23e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ir3>
 242:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ir3+0x1>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	09 f0       	breq	.+2      	; 0x24c <main+0x16a>
 24a:	51 cf       	rjmp	.-350    	; 0xee <main+0xc>
 24c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 250:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	09 f0       	breq	.+2      	; 0x25a <main+0x178>
 258:	4a cf       	rjmp	.-364    	; 0xee <main+0xc>
 25a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ir5>
 25e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ir5+0x1>
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	09 f0       	breq	.+2      	; 0x268 <main+0x186>
 266:	43 cf       	rjmp	.-378    	; 0xee <main+0xc>
			{	
				PORTA = 0b10000000; // 
 268:	cb bb       	out	0x1b, r28	; 27
			}
			if(ir1 == 0 && ir2 == 0 && ir3 == 0 && ir4 == 0 && ir5 == 0){
 26a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 26e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 272:	89 2b       	or	r24, r25
 274:	09 f0       	breq	.+2      	; 0x278 <main+0x196>
 276:	3b cf       	rjmp	.-394    	; 0xee <main+0xc>
 278:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ir2>
 27c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ir2+0x1>
 280:	89 2b       	or	r24, r25
 282:	09 f0       	breq	.+2      	; 0x286 <main+0x1a4>
 284:	34 cf       	rjmp	.-408    	; 0xee <main+0xc>
 286:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ir3>
 28a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ir3+0x1>
 28e:	89 2b       	or	r24, r25
 290:	09 f0       	breq	.+2      	; 0x294 <main+0x1b2>
 292:	2d cf       	rjmp	.-422    	; 0xee <main+0xc>
 294:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 298:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 29c:	89 2b       	or	r24, r25
 29e:	09 f0       	breq	.+2      	; 0x2a2 <main+0x1c0>
 2a0:	26 cf       	rjmp	.-436    	; 0xee <main+0xc>
 2a2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ir5>
 2a6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ir5+0x1>
 2aa:	89 2b       	or	r24, r25
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x1ce>
 2ae:	1f cf       	rjmp	.-450    	; 0xee <main+0xc>
				PORTA = 0b10100000;
 2b0:	1b bb       	out	0x1b, r17	; 27
 2b2:	1d cf       	rjmp	.-454    	; 0xee <main+0xc>
			}
			if((ir1 == 0 && ir2 == 0 && ir3 == 1)){
				PORTA = 0b00100000;
			}
			
			if(ir1 == 1 && ir2 == 1 && ir3 == 0)
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	c9 f6       	brne	.-78     	; 0x26a <main+0x188>
 2b8:	71 cf       	rjmp	.-286    	; 0x19c <main+0xba>
				PORTA = 0b10100000;
			}
			if((ir1 == 1 && ir2 == 0 && ir3 == 0)){
				PORTA = 0b10000000;
			}
			if((ir1 == 0 && ir2 == 0 && ir3 == 1)){
 2ba:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 2be:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 2c2:	f8 cf       	rjmp	.-16     	; 0x2b4 <main+0x1d2>
			
			
			if((ir1 == 0 && ir2 == 1 && ir3 == 0)){
				PORTA = 0b10100000;
			}
			if((ir1 == 1 && ir2 == 0 && ir3 == 0)){
 2c4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 2c8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	a9 f7       	brne	.-22     	; 0x2ba <main+0x1d8>
 2d0:	3e cf       	rjmp	.-388    	; 0x14e <main+0x6c>
			PORTA = 0b10000000;
			
			if(ir1 == 0 && ir2 == 1 && ir3 == 1)
			PORTA = 0b00100000;
			
			if(ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0){
 2d2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 2d6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <main+0x1fe>
 2de:	88 cf       	rjmp	.-240    	; 0x1f0 <main+0x10e>
 2e0:	06 cf       	rjmp	.-500    	; 0xee <main+0xc>
 2e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ir1>
 2e6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ir1+0x1>
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <main+0x20e>
 2ee:	87 cf       	rjmp	.-242    	; 0x1fe <main+0x11c>
 2f0:	bc cf       	rjmp	.-136    	; 0x26a <main+0x188>

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
