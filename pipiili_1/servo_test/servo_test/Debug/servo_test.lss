
servo_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000634  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058a  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042f  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000060b3  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00007273  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000072bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000021f  00000000  00000000  000072cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	31 c0       	rjmp	.+98     	; 0xc6 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:
	TCCR1B |= (1 << COM1B1 ) | (1<<WGM11) | ( 1 << WGM13) | ( 1 << WGM12 );        //NON Inverted PWM
	TCCR1B |= ( 1 << CS11 );*/
	
	
	
	TCCR1A|=(1 << COM1A1 )  | (1 << WGM11 );  
  66:	8f b5       	in	r24, 0x2f	; 47
  68:	82 68       	ori	r24, 0x82	; 130
  6a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |=  ( 1<< COM1B1);      //NON Inverted PWM
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|= ( 1 << CS11 ) ;
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 39999;  //fPWM=50Hz (Period = 20ms Standard).
  78:	8f e3       	ldi	r24, 0x3F	; 63
  7a:	9c e9       	ldi	r25, 0x9C	; 156
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38
    
	DDRD = (1<<PD4);
  80:	80 e1       	ldi	r24, 0x10	; 16
  82:	81 bb       	out	0x11, r24	; 17
	DDRD = (1<<PD5);   //PWM Pins as Out
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	81 bb       	out	0x11, r24	; 17
	
	while(1)
	{
		OCR1A= 19000; 
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	3a e4       	ldi	r19, 0x4A	; 74
		OCR1B= 19000;  //90 degree
 		_delay_ms(100);
		OCR1A= 16800; 
  8c:	80 ea       	ldi	r24, 0xA0	; 160
  8e:	91 e4       	ldi	r25, 0x41	; 65
	DDRD = (1<<PD4);
	DDRD = (1<<PD5);   //PWM Pins as Out
	
	while(1)
	{
		OCR1A= 19000; 
  90:	3b bd       	out	0x2b, r19	; 43
  92:	2a bd       	out	0x2a, r18	; 42
		OCR1B= 19000;  //90 degree
  94:	39 bd       	out	0x29, r19	; 41
  96:	28 bd       	out	0x28, r18	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	4f ef       	ldi	r20, 0xFF	; 255
  9a:	51 ee       	ldi	r21, 0xE1	; 225
  9c:	64 e0       	ldi	r22, 0x04	; 4
  9e:	41 50       	subi	r20, 0x01	; 1
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	60 40       	sbci	r22, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x38>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x42>
  a8:	00 00       	nop
 		_delay_ms(100);
		OCR1A= 16800; 
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
		OCR1B= 16800;  //90 degree
  ae:	99 bd       	out	0x29, r25	; 41
  b0:	88 bd       	out	0x28, r24	; 40
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	51 ee       	ldi	r21, 0xE1	; 225
  b6:	64 e0       	ldi	r22, 0x04	; 4
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	50 40       	sbci	r21, 0x00	; 0
  bc:	60 40       	sbci	r22, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x52>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x5c>
  c2:	00 00       	nop
  c4:	e5 cf       	rjmp	.-54     	; 0x90 <main+0x2a>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
