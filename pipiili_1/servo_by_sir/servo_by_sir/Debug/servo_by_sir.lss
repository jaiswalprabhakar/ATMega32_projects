
servo_by_sir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000669  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000587  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000338  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

void main()
{
	
	//Configure TIMER1
	TCCR1A |= (1 << COM1A1 ) | (1<<WGM11) | ( 1 << WGM13) | ( 1 << WGM12 );        //NON Inverted PWM
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	8a 69       	ori	r24, 0x9A	; 154
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= ( 1 << CS11 );
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 39999;  //fPWM=50Hz (Period = 20ms Standard).
  78:	8f e3       	ldi	r24, 0x3F	; 63
  7a:	9c e9       	ldi	r25, 0x9C	; 156
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38

	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
  80:	81 b3       	in	r24, 0x11	; 17
  82:	80 63       	ori	r24, 0x30	; 48
  84:	81 bb       	out	0x11, r24	; 17
	
	while(1)
	{
		OCR1A= 20000;  //90 degree
  86:	40 e2       	ldi	r20, 0x20	; 32
  88:	5e e4       	ldi	r21, 0x4E	; 78
		_delay_ms(50);
		OCR1A= 15000;  //90 degree
  8a:	28 e9       	ldi	r18, 0x98	; 152
  8c:	3a e3       	ldi	r19, 0x3A	; 58
		_delay_ms(50);
 		OCR1A= 17000;  //90 degree
  8e:	88 e6       	ldi	r24, 0x68	; 104
  90:	92 e4       	ldi	r25, 0x42	; 66

	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
	
	while(1)
	{
		OCR1A= 20000;  //90 degree
  92:	5b bd       	out	0x2b, r21	; 43
  94:	4a bd       	out	0x2a, r20	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	6f ef       	ldi	r22, 0xFF	; 255
  98:	70 e7       	ldi	r23, 0x70	; 112
  9a:	e2 e0       	ldi	r30, 0x02	; 2
  9c:	61 50       	subi	r22, 0x01	; 1
  9e:	70 40       	sbci	r23, 0x00	; 0
  a0:	e0 40       	sbci	r30, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
		_delay_ms(50);
		OCR1A= 15000;  //90 degree
  a8:	3b bd       	out	0x2b, r19	; 43
  aa:	2a bd       	out	0x2a, r18	; 42
  ac:	6f ef       	ldi	r22, 0xFF	; 255
  ae:	70 e7       	ldi	r23, 0x70	; 112
  b0:	e2 e0       	ldi	r30, 0x02	; 2
  b2:	61 50       	subi	r22, 0x01	; 1
  b4:	70 40       	sbci	r23, 0x00	; 0
  b6:	e0 40       	sbci	r30, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x46>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
		_delay_ms(50);
 		OCR1A= 17000;  //90 degree
  be:	9b bd       	out	0x2b, r25	; 43
  c0:	8a bd       	out	0x2a, r24	; 42
  c2:	6f ef       	ldi	r22, 0xFF	; 255
  c4:	70 e7       	ldi	r23, 0x70	; 112
  c6:	e2 e0       	ldi	r30, 0x02	; 2
  c8:	61 50       	subi	r22, 0x01	; 1
  ca:	70 40       	sbci	r23, 0x00	; 0
  cc:	e0 40       	sbci	r30, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x5c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
  d4:	de cf       	rjmp	.-68     	; 0x92 <main+0x26>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
