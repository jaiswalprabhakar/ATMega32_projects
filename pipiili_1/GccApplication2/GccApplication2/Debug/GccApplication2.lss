
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ae  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ce  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037a  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036d  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000269  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  8a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_motor>:
dir 3 - rev
*/ 

/*  ---- ONLY FOR IR Sensor ----  */
void set_motor(int type,int dir){
	if(type == 1){ // -------------- LEft Motor --------------------
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	61 f5       	brne	.+88     	; 0xee <set_motor+0x5c>
		if(dir == 1){ // Forward Direction [ Left Motor ]
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	71 05       	cpc	r23, r1
  9a:	61 f4       	brne	.+24     	; 0xb4 <set_motor+0x22>
			
			left_motor_line1 = 1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <left_motor_line1+0x1>
  a4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <left_motor_line1>
			left_motor_line2 = 0;
  a8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <left_motor_line2+0x1>
  ac:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <left_motor_line2>
			
			PORTA |= 0b10000000;
  b0:	df 9a       	sbi	0x1b, 7	; 27
  b2:	08 95       	ret
			
		}
		
		if(dir == 2){ // Stop Now [ Left Motor ]
  b4:	62 30       	cpi	r22, 0x02	; 2
  b6:	71 05       	cpc	r23, r1
  b8:	59 f4       	brne	.+22     	; 0xd0 <set_motor+0x3e>
			
			left_motor_line1 = 0;
  ba:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <left_motor_line1+0x1>
  be:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <left_motor_line1>
			left_motor_line2 = 0;
  c2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <left_motor_line2+0x1>
  c6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <left_motor_line2>
			PORTA |= 0b00000000;
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	08 95       	ret
		}
		
		if(dir == 3){ // Reverse Direction [ Left Motor ]
  d0:	63 30       	cpi	r22, 0x03	; 3
  d2:	71 05       	cpc	r23, r1
  d4:	b9 f5       	brne	.+110    	; 0x144 <set_motor+0xb2>
			
			left_motor_line1 = 0;
  d6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <left_motor_line1+0x1>
  da:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <left_motor_line1>
			left_motor_line2 = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <left_motor_line2+0x1>
  e6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <left_motor_line2>
			PORTA |= 0b01000000;
  ea:	de 9a       	sbi	0x1b, 6	; 27
  ec:	08 95       	ret
			}
	}else{ // -------------- Right Motor ------------------
		if(dir == 1){ // Forward Right Motor
  ee:	61 30       	cpi	r22, 0x01	; 1
  f0:	71 05       	cpc	r23, r1
  f2:	61 f4       	brne	.+24     	; 0x10c <set_motor+0x7a>
			
			right_motor_line1 = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <right_motor_line1+0x1>
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <right_motor_line1>
			right_motor_line2 = 0;
 100:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
 104:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
			PORTA |= 0b00100000;
 108:	dd 9a       	sbi	0x1b, 5	; 27
 10a:	08 95       	ret
		
		}
		
		if(dir == 2){ // Stop Motor
 10c:	62 30       	cpi	r22, 0x02	; 2
 10e:	71 05       	cpc	r23, r1
 110:	59 f4       	brne	.+22     	; 0x128 <set_motor+0x96>
			
			right_motor_line1 = 0;
 112:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <right_motor_line1+0x1>
 116:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <right_motor_line1>
			right_motor_line2 = 0;
 11a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
 11e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
			PORTA |= 0b00000000;
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	8b bb       	out	0x1b, r24	; 27
 126:	08 95       	ret
		}
		if(dir == 3){ // Reverse Motor
 128:	63 30       	cpi	r22, 0x03	; 3
 12a:	71 05       	cpc	r23, r1
 12c:	59 f4       	brne	.+22     	; 0x144 <set_motor+0xb2>
			
			right_motor_line1 = 0;
 12e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <right_motor_line1+0x1>
 132:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <right_motor_line1>
			right_motor_line2 = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 13e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
			
			PORTA |= 0b00010000;
 142:	dc 9a       	sbi	0x1b, 4	; 27
 144:	08 95       	ret

00000146 <get_motor_state>:
	}
	
	
	
}
int get_motor_state(int ir1,int ir2,int ir3,int ir4,int ir5){
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17

	if(ir1 == false || ir2 == false || ir3 == true || ir4 == false || ir5 == false)
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	d1 f0       	breq	.+52     	; 0x182 <get_motor_state+0x3c>
 14e:	61 15       	cp	r22, r1
 150:	71 05       	cpc	r23, r1
 152:	d1 f0       	breq	.+52     	; 0x188 <get_motor_state+0x42>
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	51 05       	cpc	r21, r1
 158:	d1 f0       	breq	.+52     	; 0x18e <get_motor_state+0x48>
 15a:	21 15       	cp	r18, r1
 15c:	31 05       	cpc	r19, r1
 15e:	d1 f0       	breq	.+52     	; 0x194 <get_motor_state+0x4e>
 160:	01 15       	cp	r16, r1
 162:	11 05       	cpc	r17, r1
 164:	d1 f0       	breq	.+52     	; 0x19a <get_motor_state+0x54>
		return 0; // 0 - means Straight Path
	if(ir1 == true || ir2 == true || ir3 == true || ir4 == false || ir5 == false )
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	d9 f0       	breq	.+54     	; 0x1a0 <get_motor_state+0x5a>
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	71 05       	cpc	r23, r1
 16e:	d9 f0       	breq	.+54     	; 0x1a6 <get_motor_state+0x60>
		return 1; // 1 - Sharp Left
	if(ir1 == false || ir2 == false || ir3 == true || ir4 == true || ir5 == true )
 170:	21 30       	cpi	r18, 0x01	; 1
 172:	31 05       	cpc	r19, r1
 174:	d9 f0       	breq	.+54     	; 0x1ac <get_motor_state+0x66>
 176:	01 30       	cpi	r16, 0x01	; 1
 178:	11 05       	cpc	r17, r1
 17a:	d9 f0       	breq	.+54     	; 0x1b2 <get_motor_state+0x6c>
	||	(ir1 ==  true || ir2 ==  true || ir3 ==  true || ir4 ==  true || ir5 == false)||(ir1 ==  true|| ir2 ==  true|| ir3 ==  true || ir4 ==  true || ir5 ==  true)
	)
		return 5;
		
	else
		return 10;
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	1a c0       	rjmp	.+52     	; 0x1b6 <get_motor_state+0x70>
	
}
int get_motor_state(int ir1,int ir2,int ir3,int ir4,int ir5){

	if(ir1 == false || ir2 == false || ir3 == true || ir4 == false || ir5 == false)
		return 0; // 0 - means Straight Path
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	17 c0       	rjmp	.+46     	; 0x1b6 <get_motor_state+0x70>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	14 c0       	rjmp	.+40     	; 0x1b6 <get_motor_state+0x70>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	11 c0       	rjmp	.+34     	; 0x1b6 <get_motor_state+0x70>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e c0       	rjmp	.+28     	; 0x1b6 <get_motor_state+0x70>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0b c0       	rjmp	.+22     	; 0x1b6 <get_motor_state+0x70>
	if(ir1 == true || ir2 == true || ir3 == true || ir4 == false || ir5 == false )
		return 1; // 1 - Sharp Left
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <get_motor_state+0x70>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <get_motor_state+0x70>
	if(ir1 == false || ir2 == false || ir3 == true || ir4 == true || ir5 == true )
	return 2;	// 2 - Sharp Right
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <get_motor_state+0x70>
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	90 e0       	ldi	r25, 0x00	; 0
		return 5;
		
	else
		return 10;
	
}
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <main>:


int main(void)
{
   
   DDRA = 0b11110000;//output(last four pins of A)
 1bc:	80 ef       	ldi	r24, 0xF0	; 240
 1be:	8a bb       	out	0x1a, r24	; 26
   DDRD = 0b00000000;//input (sensor)
 1c0:	11 ba       	out	0x11, r1	; 17
    while (1) 
    {
		
		int interpret = 0;
			// Getting Current State of Each IR Sensor
		ir1 = 	bit_is_clear(PIND,2);
 1c2:	c1 e0       	ldi	r28, 0x01	; 1
 1c4:	80 b3       	in	r24, 0x10	; 16
 1c6:	86 95       	lsr	r24
 1c8:	86 95       	lsr	r24
 1ca:	8c 27       	eor	r24, r28
 1cc:	81 70       	andi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <ir1>
 1d4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <ir1+0x1>
		ir2 = 	bit_is_clear(PIND,3);
 1d8:	60 b3       	in	r22, 0x10	; 16
 1da:	66 95       	lsr	r22
 1dc:	66 95       	lsr	r22
 1de:	66 95       	lsr	r22
 1e0:	6c 27       	eor	r22, r28
 1e2:	61 70       	andi	r22, 0x01	; 1
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <ir2>
 1ea:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <ir2+0x1>
		ir3 = 	bit_is_clear(PIND,4);
 1ee:	40 b3       	in	r20, 0x10	; 16
 1f0:	42 95       	swap	r20
 1f2:	4f 70       	andi	r20, 0x0F	; 15
 1f4:	4c 27       	eor	r20, r28
 1f6:	41 70       	andi	r20, 0x01	; 1
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <ir3>
 1fe:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <ir3+0x1>
		ir4 = 	bit_is_clear(PIND,5);
 202:	20 b3       	in	r18, 0x10	; 16
 204:	22 95       	swap	r18
 206:	26 95       	lsr	r18
 208:	27 70       	andi	r18, 0x07	; 7
 20a:	2c 27       	eor	r18, r28
 20c:	21 70       	andi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <ir4>
 214:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <ir4+0x1>
		ir5 = 	bit_is_clear(PIND,6); 
 218:	00 b3       	in	r16, 0x10	; 16
 21a:	02 95       	swap	r16
 21c:	06 95       	lsr	r16
 21e:	06 95       	lsr	r16
 220:	03 70       	andi	r16, 0x03	; 3
 222:	0c 27       	eor	r16, r28
 224:	01 70       	andi	r16, 0x01	; 1
 226:	10 e0       	ldi	r17, 0x00	; 0
 228:	00 93 6c 00 	sts	0x006C, r16	; 0x80006c <ir5>
 22c:	10 93 6d 00 	sts	0x006D, r17	; 0x80006d <ir5+0x1>
			
		// Now Checking Logic for Vehicle Running Setup
		interpret = get_motor_state(ir1,ir2,ir3,ir4,ir5);
 230:	0e 94 a3 00 	call	0x146	; 0x146 <get_motor_state>
 234:	8c 01       	movw	r16, r24
	2 - Sharp Right
	3 - Smooth Left
	4 - Smooth Right
	5 - Stop
*/
		if(interpret == 0){ // Straight
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	69 f4       	brne	.+26     	; 0x254 <main+0x98>
			set_motor(1,1);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,1);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 252:	1f c0       	rjmp	.+62     	; 0x292 <main+0xd6>
		}
		if(interpret == 1){ // Sharp Left
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	91 05       	cpc	r25, r1
 258:	69 f4       	brne	.+26     	; 0x274 <main+0xb8>
			set_motor(1,3);
 25a:	63 e0       	ldi	r22, 0x03	; 3
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,1);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 272:	1f c0       	rjmp	.+62     	; 0x2b2 <main+0xf6>
		}
		if(interpret == 2){ // Sharp Right
 274:	02 97       	sbiw	r24, 0x02	; 2
 276:	69 f4       	brne	.+26     	; 0x292 <main+0xd6>
			set_motor(1,1);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,3);
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 290:	20 c0       	rjmp	.+64     	; 0x2d2 <main+0x116>
		}
		if(interpret == 3){ // Smooth Left
 292:	03 30       	cpi	r16, 0x03	; 3
 294:	11 05       	cpc	r17, r1
 296:	69 f4       	brne	.+26     	; 0x2b2 <main+0xf6>
			set_motor(1,2);
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,1);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 2b0:	89 cf       	rjmp	.-238    	; 0x1c4 <main+0x8>
		}
		if(interpret == 4){
 2b2:	04 30       	cpi	r16, 0x04	; 4
 2b4:	11 05       	cpc	r17, r1
 2b6:	69 f4       	brne	.+26     	; 0x2d2 <main+0x116>
			set_motor(1,1);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,2);
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 2d0:	79 cf       	rjmp	.-270    	; 0x1c4 <main+0x8>
		}
		if(interpret == 5){
 2d2:	05 30       	cpi	r16, 0x05	; 5
 2d4:	11 05       	cpc	r17, r1
 2d6:	09 f0       	breq	.+2      	; 0x2da <main+0x11e>
 2d8:	75 cf       	rjmp	.-278    	; 0x1c4 <main+0x8>
			set_motor(1,2);
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,2);
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 2f2:	68 cf       	rjmp	.-304    	; 0x1c4 <main+0x8>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
