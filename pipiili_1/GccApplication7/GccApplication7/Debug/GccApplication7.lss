
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000348  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005d2  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000508  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b5  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/io.h>
#include <avr/sfr_defs.h>
int ir1,ir2,ir3,ir4,ir5;
int main()
{
	DDRA = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  80:	11 ba       	out	0x11, r1	; 17
	
	while(1){
			
			
			ir1 = bit_is_clear(PIND,2);
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
			ir3 = bit_is_clear(PIND,4);
			ir4 = bit_is_clear(PIND,5);
			ir5 = bit_is_clear(PIND,6);
			
			if(ir1 == 0 && ir2 == 0 && ir3 == 1 && ir4 == 0 && ir5 == 0){
				PORTA = 0b10100000;
  8a:	a0 ea       	ldi	r26, 0xA0	; 160
			
			if(ir1 == 0 && ir2 == 1 && ir3 == 0 && ir4 == 0 && ir5 == 0){
				PORTA = 0b00100000; // Smooth Right
			}
			if(ir1 == 0 && ir2 == 0 && ir3 == 0 && ir4 == 1 && ir5 == 0){
				PORTA = 0b00100000; // SMooth Left
  8c:	f0 e2       	ldi	r31, 0x20	; 32
			if((ir1 == 0 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0)){
				PORTA = 0b10000000; // Smooth Left
			}
			
			if(ir1 == 0 && ir2 == 0 && ir3 == 1 && ir4 == 1 && ir5 == 1){
				PORTA = 0b01100000; // Sharp Right
  8e:	d0 e6       	ldi	r29, 0x60	; 96
			if((ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0)){
				PORTA = 0b10010000; // Sharp Left 
			}
			
			if((ir1 == 0 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0)){
				PORTA = 0b10000000; // Smooth Left
  90:	b0 e8       	ldi	r27, 0x80	; 128
			
			if(ir1 == 0 && ir2 == 0 && ir3 == 1 && ir4 == 0 && ir5 == 0){
				PORTA = 0b10100000;
			}
			if((ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0)){
				PORTA = 0b10010000; // Sharp Left 
  92:	0f 2e       	mov	r0, r31
  94:	f0 e9       	ldi	r31, 0x90	; 144
  96:	ff 2e       	mov	r15, r31
  98:	f0 2d       	mov	r31, r0
	DDRD = 0x00;
	
	while(1){
			
			
			ir1 = bit_is_clear(PIND,2);
  9a:	20 b3       	in	r18, 0x10	; 16
  9c:	69 2f       	mov	r22, r25
  9e:	58 2f       	mov	r21, r24
  a0:	72 2f       	mov	r23, r18
  a2:	74 70       	andi	r23, 0x04	; 4
  a4:	22 ff       	sbrs	r18, 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x30>
  a8:	64 2f       	mov	r22, r20
  aa:	53 2f       	mov	r21, r19
  ac:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <ir1>
  b0:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <ir1+0x1>
			ir2 = bit_is_clear(PIND,3);
  b4:	20 b3       	in	r18, 0x10	; 16
  b6:	69 2f       	mov	r22, r25
  b8:	58 2f       	mov	r21, r24
  ba:	e2 2f       	mov	r30, r18
  bc:	e8 70       	andi	r30, 0x08	; 8
  be:	23 ff       	sbrs	r18, 3
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x4a>
  c2:	64 2f       	mov	r22, r20
  c4:	53 2f       	mov	r21, r19
  c6:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <ir2>
  ca:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <ir2+0x1>
			ir3 = bit_is_clear(PIND,4);
  ce:	20 b3       	in	r18, 0x10	; 16
  d0:	69 2f       	mov	r22, r25
  d2:	58 2f       	mov	r21, r24
  d4:	12 2f       	mov	r17, r18
  d6:	10 71       	andi	r17, 0x10	; 16
  d8:	24 ff       	sbrs	r18, 4
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x64>
  dc:	64 2f       	mov	r22, r20
  de:	53 2f       	mov	r21, r19
  e0:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <ir3>
  e4:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <ir3+0x1>
			ir4 = bit_is_clear(PIND,5);
  e8:	20 b3       	in	r18, 0x10	; 16
  ea:	69 2f       	mov	r22, r25
  ec:	58 2f       	mov	r21, r24
  ee:	02 2f       	mov	r16, r18
  f0:	00 72       	andi	r16, 0x20	; 32
  f2:	25 ff       	sbrs	r18, 5
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x7e>
  f6:	64 2f       	mov	r22, r20
  f8:	53 2f       	mov	r21, r19
  fa:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
  fe:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			ir5 = bit_is_clear(PIND,6);
 102:	20 b3       	in	r18, 0x10	; 16
 104:	69 2f       	mov	r22, r25
 106:	58 2f       	mov	r21, r24
 108:	c2 2f       	mov	r28, r18
 10a:	c0 74       	andi	r28, 0x40	; 64
 10c:	26 ff       	sbrs	r18, 6
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x98>
 110:	64 2f       	mov	r22, r20
 112:	53 2f       	mov	r21, r19
 114:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <ir5>
 118:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <ir5+0x1>
			
			if(ir1 == 0 && ir2 == 0 && ir3 == 1 && ir4 == 0 && ir5 == 0){
 11c:	77 23       	and	r23, r23
 11e:	41 f0       	breq	.+16     	; 0x130 <main+0xb4>
 120:	ee 23       	and	r30, r30
 122:	31 f0       	breq	.+12     	; 0x130 <main+0xb4>
 124:	11 11       	cpse	r17, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <main+0xb4>
 128:	00 23       	and	r16, r16
 12a:	11 f0       	breq	.+4      	; 0x130 <main+0xb4>
 12c:	c1 11       	cpse	r28, r1
				PORTA = 0b10100000;
 12e:	ab bb       	out	0x1b, r26	; 27
			}
			if((ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0)){
 130:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 134:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 138:	61 30       	cpi	r22, 0x01	; 1
 13a:	71 05       	cpc	r23, r1
 13c:	f9 f4       	brne	.+62     	; 0x17c <main+0x100>
 13e:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 142:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 146:	61 30       	cpi	r22, 0x01	; 1
 148:	71 05       	cpc	r23, r1
 14a:	09 f0       	breq	.+2      	; 0x14e <main+0xd2>
 14c:	80 c0       	rjmp	.+256    	; 0x24e <main+0x1d2>
 14e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 152:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	71 05       	cpc	r23, r1
 15a:	09 f0       	breq	.+2      	; 0x15e <main+0xe2>
 15c:	78 c0       	rjmp	.+240    	; 0x24e <main+0x1d2>
 15e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 162:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 166:	67 2b       	or	r22, r23
 168:	09 f0       	breq	.+2      	; 0x16c <main+0xf0>
 16a:	71 c0       	rjmp	.+226    	; 0x24e <main+0x1d2>
 16c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 170:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 174:	67 2b       	or	r22, r23
 176:	09 f0       	breq	.+2      	; 0x17a <main+0xfe>
 178:	6a c0       	rjmp	.+212    	; 0x24e <main+0x1d2>
				PORTA = 0b10010000; // Sharp Left 
 17a:	fb ba       	out	0x1b, r15	; 27
			}
			
			if((ir1 == 0 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0)){
 17c:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 180:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 184:	67 2b       	or	r22, r23
 186:	09 f0       	breq	.+2      	; 0x18a <main+0x10e>
 188:	86 c0       	rjmp	.+268    	; 0x296 <main+0x21a>
 18a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 18e:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 192:	61 30       	cpi	r22, 0x01	; 1
 194:	71 05       	cpc	r23, r1
 196:	d9 f4       	brne	.+54     	; 0x1ce <main+0x152>
 198:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 19c:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	71 05       	cpc	r23, r1
 1a4:	c1 f5       	brne	.+112    	; 0x216 <main+0x19a>
 1a6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1aa:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	67 2b       	or	r22, r23
 1b0:	91 f5       	brne	.+100    	; 0x216 <main+0x19a>
 1b2:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 1b6:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 1ba:	67 2b       	or	r22, r23
 1bc:	61 f5       	brne	.+88     	; 0x216 <main+0x19a>
				PORTA = 0b10000000; // Smooth Left
 1be:	bb bb       	out	0x1b, r27	; 27
			}
			
			if(ir1 == 0 && ir2 == 0 && ir3 == 1 && ir4 == 1 && ir5 == 1){
 1c0:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 1c4:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 1c8:	67 2b       	or	r22, r23
 1ca:	09 f0       	breq	.+2      	; 0x1ce <main+0x152>
 1cc:	88 c0       	rjmp	.+272    	; 0x2de <main+0x262>
 1ce:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 1d2:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 1d6:	67 2b       	or	r22, r23
 1d8:	09 f0       	breq	.+2      	; 0x1dc <main+0x160>
 1da:	40 c0       	rjmp	.+128    	; 0x25c <main+0x1e0>
 1dc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 1e0:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	71 05       	cpc	r23, r1
 1e8:	e9 f4       	brne	.+58     	; 0x224 <main+0x1a8>
 1ea:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ee:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	61 30       	cpi	r22, 0x01	; 1
 1f4:	71 05       	cpc	r23, r1
 1f6:	b1 f4       	brne	.+44     	; 0x224 <main+0x1a8>
 1f8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 1fc:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 200:	61 30       	cpi	r22, 0x01	; 1
 202:	71 05       	cpc	r23, r1
 204:	79 f4       	brne	.+30     	; 0x224 <main+0x1a8>
				PORTA = 0b01100000; // Sharp Right
 206:	db bb       	out	0x1b, r29	; 27
			}
			if(ir1 == 0 && ir2 == 0 && ir3 == 1 && ir4 == 1 && ir5 == 0){
 208:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 20c:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 210:	67 2b       	or	r22, r23
 212:	09 f0       	breq	.+2      	; 0x216 <main+0x19a>
 214:	64 c0       	rjmp	.+200    	; 0x2de <main+0x262>
 216:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 21a:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 21e:	67 2b       	or	r22, r23
 220:	09 f0       	breq	.+2      	; 0x224 <main+0x1a8>
 222:	87 c0       	rjmp	.+270    	; 0x332 <main+0x2b6>
 224:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 228:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 22c:	61 30       	cpi	r22, 0x01	; 1
 22e:	71 05       	cpc	r23, r1
 230:	c1 f5       	brne	.+112    	; 0x2a2 <main+0x226>
 232:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 236:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23a:	61 30       	cpi	r22, 0x01	; 1
 23c:	71 05       	cpc	r23, r1
 23e:	89 f5       	brne	.+98     	; 0x2a2 <main+0x226>
 240:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 244:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 248:	67 2b       	or	r22, r23
 24a:	59 f5       	brne	.+86     	; 0x2a2 <main+0x226>
				PORTA = 0b00100000; // Smooth Right
 24c:	fb bb       	out	0x1b, r31	; 27
			}
			
			if(ir1 == 0 && ir2 == 1 && ir3 == 0 && ir4 == 0 && ir5 == 0){
 24e:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 252:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 256:	67 2b       	or	r22, r23
 258:	09 f0       	breq	.+2      	; 0x25c <main+0x1e0>
 25a:	41 c0       	rjmp	.+130    	; 0x2de <main+0x262>
 25c:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 260:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 264:	61 30       	cpi	r22, 0x01	; 1
 266:	71 05       	cpc	r23, r1
 268:	e1 f4       	brne	.+56     	; 0x2a2 <main+0x226>
 26a:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 26e:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 272:	67 2b       	or	r22, r23
 274:	09 f0       	breq	.+2      	; 0x278 <main+0x1fc>
 276:	11 cf       	rjmp	.-478    	; 0x9a <main+0x1e>
 278:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 280:	67 2b       	or	r22, r23
 282:	09 f0       	breq	.+2      	; 0x286 <main+0x20a>
 284:	0a cf       	rjmp	.-492    	; 0x9a <main+0x1e>
 286:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 28a:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 28e:	67 2b       	or	r22, r23
 290:	09 f0       	breq	.+2      	; 0x294 <main+0x218>
 292:	03 cf       	rjmp	.-506    	; 0x9a <main+0x1e>
				PORTA = 0b00100000; // Smooth Right
 294:	fb bb       	out	0x1b, r31	; 27
			}
			if(ir1 == 0 && ir2 == 0 && ir3 == 0 && ir4 == 1 && ir5 == 0){
 296:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 29a:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 29e:	67 2b       	or	r22, r23
 2a0:	f1 f4       	brne	.+60     	; 0x2de <main+0x262>
 2a2:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 2a6:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 2aa:	67 2b       	or	r22, r23
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x234>
 2ae:	f5 ce       	rjmp	.-534    	; 0x9a <main+0x1e>
 2b0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 2b4:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 2b8:	67 2b       	or	r22, r23
 2ba:	09 f0       	breq	.+2      	; 0x2be <main+0x242>
 2bc:	ee ce       	rjmp	.-548    	; 0x9a <main+0x1e>
 2be:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	71 05       	cpc	r23, r1
 2ca:	09 f0       	breq	.+2      	; 0x2ce <main+0x252>
 2cc:	e6 ce       	rjmp	.-564    	; 0x9a <main+0x1e>
 2ce:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 2d2:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 2d6:	67 2b       	or	r22, r23
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x260>
 2da:	df ce       	rjmp	.-578    	; 0x9a <main+0x1e>
				PORTA = 0b00100000; // SMooth Left
 2dc:	fb bb       	out	0x1b, r31	; 27
			}
			
			if(ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 1 && ir5 == 1){
 2de:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 2e2:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 2e6:	61 30       	cpi	r22, 0x01	; 1
 2e8:	71 05       	cpc	r23, r1
 2ea:	09 f0       	breq	.+2      	; 0x2ee <main+0x272>
 2ec:	d6 ce       	rjmp	.-596    	; 0x9a <main+0x1e>
 2ee:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 2f2:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	71 05       	cpc	r23, r1
 2fa:	09 f0       	breq	.+2      	; 0x2fe <main+0x282>
 2fc:	ce ce       	rjmp	.-612    	; 0x9a <main+0x1e>
 2fe:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 302:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 306:	61 30       	cpi	r22, 0x01	; 1
 308:	71 05       	cpc	r23, r1
 30a:	09 f0       	breq	.+2      	; 0x30e <main+0x292>
 30c:	c6 ce       	rjmp	.-628    	; 0x9a <main+0x1e>
 30e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 312:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 316:	61 30       	cpi	r22, 0x01	; 1
 318:	71 05       	cpc	r23, r1
 31a:	09 f0       	breq	.+2      	; 0x31e <main+0x2a2>
 31c:	be ce       	rjmp	.-644    	; 0x9a <main+0x1e>
 31e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 322:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 326:	61 30       	cpi	r22, 0x01	; 1
 328:	71 05       	cpc	r23, r1
 32a:	09 f0       	breq	.+2      	; 0x32e <main+0x2b2>
 32c:	b6 ce       	rjmp	.-660    	; 0x9a <main+0x1e>
				PORTA - 0x00;
 32e:	2b b3       	in	r18, 0x1b	; 27
 330:	b4 ce       	rjmp	.-664    	; 0x9a <main+0x1e>
			}
			if(ir1 == 0 && ir2 == 0 && ir3 == 1 && ir4 == 1 && ir5 == 0){
				PORTA = 0b00100000; // Smooth Right
			}
			
			if(ir1 == 0 && ir2 == 1 && ir3 == 0 && ir4 == 0 && ir5 == 0){
 332:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 336:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 33a:	61 30       	cpi	r22, 0x01	; 1
 33c:	71 05       	cpc	r23, r1
 33e:	09 f4       	brne	.+2      	; 0x342 <main+0x2c6>
 340:	94 cf       	rjmp	.-216    	; 0x26a <main+0x1ee>
 342:	ab ce       	rjmp	.-682    	; 0x9a <main+0x1e>

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
