
tcs_with_clear_prefinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000602  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9a  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e9  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a80  00000000  00000000  0000252f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002faf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  64:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TCSSelectRed>:
	//TCSS3Low();
}
void off()
{
	PORTB = 0xFF;
	PORTD = 0xFF;
  6c:	da 98       	cbi	0x1b, 2	; 27
  6e:	d9 98       	cbi	0x1b, 1	; 27
  70:	08 95       	ret

00000072 <TCSSelectGreen>:
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	86 60       	ori	r24, 0x06	; 6
  76:	8b bb       	out	0x1b, r24	; 27
  78:	08 95       	ret

0000007a <TCSSelectBlue>:
  7a:	da 98       	cbi	0x1b, 2	; 27
  7c:	d9 9a       	sbi	0x1b, 1	; 27
  7e:	08 95       	ret

00000080 <TCSSelectClear>:
  80:	da 9a       	sbi	0x1b, 2	; 27
  82:	d9 98       	cbi	0x1b, 1	; 27
  84:	08 95       	ret

00000086 <TCSMeasure>:




uint32_t TCSMeasure()
{
  86:	cf 92       	push	r12
  88:	df 92       	push	r13
  8a:	ef 92       	push	r14
  8c:	ff 92       	push	r15
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
	//timeout zone
	unsigned long numloops = 0;
	unsigned long maxloops = 500000;
	unsigned long width = 0;
	// wait for any previous pulse to end
	while ( RC_PIN_STATE == 1)
  92:	cb 99       	sbic	0x19, 3	; 25
  94:	9c c0       	rjmp	.+312    	; 0x1ce <TCSMeasure+0x148>
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
  96:	99 b3       	in	r25, 0x19	; 25
  98:	93 fb       	bst	r25, 3
  9a:	99 27       	eor	r25, r25
  9c:	90 f9       	bld	r25, 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	98 27       	eor	r25, r24
		if (numloops++ == maxloops) break;
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
	unsigned long maxloops = 500000;
	unsigned long width = 0;
	// wait for any previous pulse to end
	while ( RC_PIN_STATE == 1)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	11 c0       	rjmp	.+34     	; 0xd2 <TCSMeasure+0x4c>
  b0:	89 b3       	in	r24, 0x19	; 25
  b2:	92 2f       	mov	r25, r18
  b4:	38 2f       	mov	r19, r24
  b6:	38 70       	andi	r19, 0x08	; 8
  b8:	83 fd       	sbrc	r24, 3
  ba:	9e 2f       	mov	r25, r30
		if (numloops++ == maxloops) break;
  bc:	4f 5f       	subi	r20, 0xFF	; 255
  be:	5f 4f       	sbci	r21, 0xFF	; 255
  c0:	6f 4f       	sbci	r22, 0xFF	; 255
  c2:	7f 4f       	sbci	r23, 0xFF	; 255
  c4:	41 32       	cpi	r20, 0x21	; 33
  c6:	81 ea       	ldi	r24, 0xA1	; 161
  c8:	58 07       	cpc	r21, r24
  ca:	87 e0       	ldi	r24, 0x07	; 7
  cc:	68 07       	cpc	r22, r24
  ce:	71 05       	cpc	r23, r1
  d0:	69 f1       	breq	.+90     	; 0x12c <TCSMeasure+0xa6>
	//timeout zone
	unsigned long numloops = 0;
	unsigned long maxloops = 500000;
	unsigned long width = 0;
	// wait for any previous pulse to end
	while ( RC_PIN_STATE == 1)
  d2:	91 30       	cpi	r25, 0x01	; 1
  d4:	69 f3       	breq	.-38     	; 0xb0 <TCSMeasure+0x2a>
  d6:	74 c0       	rjmp	.+232    	; 0x1c0 <TCSMeasure+0x13a>
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (RC_PIN_STATE == 0)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
  d8:	89 b3       	in	r24, 0x19	; 25
  da:	83 fb       	bst	r24, 3
  dc:	88 27       	eor	r24, r24
  de:	80 f9       	bld	r24, 0
  e0:	89 27       	eor	r24, r25
		if (numloops++ == maxloops) break;
  e2:	b9 01       	movw	r22, r18
  e4:	a8 01       	movw	r20, r16
  e6:	4f 5f       	subi	r20, 0xFF	; 255
  e8:	5f 4f       	sbci	r21, 0xFF	; 255
  ea:	6f 4f       	sbci	r22, 0xFF	; 255
  ec:	7f 4f       	sbci	r23, 0xFF	; 255
  ee:	00 32       	cpi	r16, 0x20	; 32
  f0:	11 4a       	sbci	r17, 0xA1	; 161
  f2:	27 40       	sbci	r18, 0x07	; 7
  f4:	31 05       	cpc	r19, r1
  f6:	39 f0       	breq	.+14     	; 0x106 <TCSMeasure+0x80>
  f8:	8a 01       	movw	r16, r20
  fa:	9b 01       	movw	r18, r22
  fc:	01 c0       	rjmp	.+2      	; 0x100 <TCSMeasure+0x7a>
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (RC_PIN_STATE == 0)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
  fe:	91 e0       	ldi	r25, 0x01	; 1
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (RC_PIN_STATE == 0)
 100:	88 23       	and	r24, r24
 102:	51 f3       	breq	.-44     	; 0xd8 <TCSMeasure+0x52>
 104:	02 c0       	rjmp	.+4      	; 0x10a <TCSMeasure+0x84>
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
		if (numloops++ == maxloops) break;
 106:	8a 01       	movw	r16, r20
 108:	9b 01       	movw	r18, r22
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (RC_PIN_STATE == 1)
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	09 f0       	breq	.+2      	; 0x110 <TCSMeasure+0x8a>
 10e:	42 c0       	rjmp	.+132    	; 0x194 <TCSMeasure+0x10e>
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0);
 110:	89 b3       	in	r24, 0x19	; 25
 112:	83 fb       	bst	r24, 3
 114:	99 27       	eor	r25, r25
 116:	90 f9       	bld	r25, 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	89 27       	eor	r24, r25
		if (numloops++ == maxloops) break;
 11c:	00 32       	cpi	r16, 0x20	; 32
 11e:	91 ea       	ldi	r25, 0xA1	; 161
 120:	19 07       	cpc	r17, r25
 122:	97 e0       	ldi	r25, 0x07	; 7
 124:	29 07       	cpc	r18, r25
 126:	31 05       	cpc	r19, r1
 128:	51 f5       	brne	.+84     	; 0x17e <TCSMeasure+0xf8>
 12a:	38 c0       	rjmp	.+112    	; 0x19c <TCSMeasure+0x116>
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (RC_PIN_STATE == 0)
 12c:	31 11       	cpse	r19, r1
 12e:	69 c0       	rjmp	.+210    	; 0x202 <TCSMeasure+0x17c>
 130:	62 c0       	rjmp	.+196    	; 0x1f6 <TCSMeasure+0x170>
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
 132:	89 b3       	in	r24, 0x19	; 25
 134:	83 fb       	bst	r24, 3
 136:	99 27       	eor	r25, r25
 138:	90 f9       	bld	r25, 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	89 27       	eor	r24, r25
		if (numloops++ == maxloops) break;
 13e:	8a 01       	movw	r16, r20
 140:	9b 01       	movw	r18, r22
 142:	0f 5f       	subi	r16, 0xFF	; 255
 144:	1f 4f       	sbci	r17, 0xFF	; 255
 146:	2f 4f       	sbci	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	40 32       	cpi	r20, 0x20	; 32
 14c:	51 4a       	sbci	r21, 0xA1	; 161
 14e:	67 40       	sbci	r22, 0x07	; 7
 150:	71 05       	cpc	r23, r1
 152:	a9 f6       	brne	.-86     	; 0xfe <TCSMeasure+0x78>
 154:	da cf       	rjmp	.-76     	; 0x10a <TCSMeasure+0x84>
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (RC_PIN_STATE == 1)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0);
 156:	89 b3       	in	r24, 0x19	; 25
 158:	83 fb       	bst	r24, 3
 15a:	88 27       	eor	r24, r24
 15c:	80 f9       	bld	r24, 0
 15e:	89 27       	eor	r24, r25
		if (numloops++ == maxloops) break;
 160:	68 01       	movw	r12, r16
 162:	79 01       	movw	r14, r18
 164:	c4 0e       	add	r12, r20
 166:	d5 1e       	adc	r13, r21
 168:	e6 1e       	adc	r14, r22
 16a:	f7 1e       	adc	r15, r23
 16c:	e0 e2       	ldi	r30, 0x20	; 32
 16e:	ce 16       	cp	r12, r30
 170:	e1 ea       	ldi	r30, 0xA1	; 161
 172:	de 06       	cpc	r13, r30
 174:	e7 e0       	ldi	r30, 0x07	; 7
 176:	ee 06       	cpc	r14, r30
 178:	f1 04       	cpc	r15, r1
 17a:	29 f4       	brne	.+10     	; 0x186 <TCSMeasure+0x100>
 17c:	12 c0       	rjmp	.+36     	; 0x1a2 <TCSMeasure+0x11c>
	unsigned long width = 0;
	// wait for any previous pulse to end
	while ( RC_PIN_STATE == 1)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
		if (numloops++ == maxloops) break;
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	ba 01       	movw	r22, r20
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (RC_PIN_STATE == 1)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0);
 184:	91 e0       	ldi	r25, 0x01	; 1
		if (numloops++ == maxloops) break;
		width++;
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	6f 4f       	sbci	r22, 0xFF	; 255
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
		if (numloops++ == maxloops) break;
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (RC_PIN_STATE == 1)
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	11 f3       	breq	.-60     	; 0x156 <TCSMeasure+0xd0>
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <TCSMeasure+0x11c>
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	ba 01       	movw	r22, r20
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <TCSMeasure+0x11c>
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0);
		if (numloops++ == maxloops) break;
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	ba 01       	movw	r22, r20
		width++;
	}

	float RC_VALUE = width/16;
	return RC_VALUE;
 1a2:	cb 01       	movw	r24, r22
 1a4:	ba 01       	movw	r22, r20
 1a6:	68 94       	set
 1a8:	13 f8       	bld	r1, 3
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	77 95       	ror	r23
 1b0:	67 95       	ror	r22
 1b2:	16 94       	lsr	r1
 1b4:	d1 f7       	brne	.-12     	; 0x1aa <TCSMeasure+0x124>
 1b6:	0e 94 99 02 	call	0x532	; 0x532 <__floatunsisf>
 1ba:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fixunssfsi>
 1be:	2c c0       	rjmp	.+88     	; 0x218 <TCSMeasure+0x192>
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (RC_PIN_STATE == 0)
 1c0:	99 23       	and	r25, r25
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <TCSMeasure+0x140>
 1c4:	b6 cf       	rjmp	.-148    	; 0x132 <TCSMeasure+0xac>
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	ba 01       	movw	r22, r20
 1cc:	ea cf       	rjmp	.-44     	; 0x1a2 <TCSMeasure+0x11c>
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
 1ce:	89 b3       	in	r24, 0x19	; 25
 1d0:	83 fb       	bst	r24, 3
 1d2:	99 27       	eor	r25, r25
 1d4:	90 f9       	bld	r25, 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	89 27       	eor	r24, r25
		if (numloops++ == maxloops) break;
 1da:	01 e0       	ldi	r16, 0x01	; 1
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	8d cf       	rjmp	.-230    	; 0xfe <TCSMeasure+0x78>
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (RC_PIN_STATE == 1)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0);
 1e4:	89 b3       	in	r24, 0x19	; 25
 1e6:	83 fb       	bst	r24, 3
 1e8:	99 27       	eor	r25, r25
 1ea:	90 f9       	bld	r25, 0
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	89 27       	eor	r24, r25
	unsigned long width = 0;
	// wait for any previous pulse to end
	while ( RC_PIN_STATE == 1)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
		if (numloops++ == maxloops) break;
 1f0:	8a 01       	movw	r16, r20
 1f2:	9b 01       	movw	r18, r22
 1f4:	c4 cf       	rjmp	.-120    	; 0x17e <TCSMeasure+0xf8>
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
		if (numloops++ == maxloops) break;
	}
	
	// wait for the pulse to stop @ here we are measuring the pulse width = incrementing the WIDTH value by one each cycle. atmega328 1 micro second is equal to 16 cycles.
	while (RC_PIN_STATE == 1)
 1f6:	33 23       	and	r19, r19
 1f8:	a9 f3       	breq	.-22     	; 0x1e4 <TCSMeasure+0x15e>
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	ba 01       	movw	r22, r20
 200:	d0 cf       	rjmp	.-96     	; 0x1a2 <TCSMeasure+0x11c>
		if (numloops++ == maxloops) break;
	}
	// wait for the pulse to start
	while (RC_PIN_STATE == 0)
	{
		RC_PIN_STATE = (bit_is_set(PINA,3)==0); //keep reading the pin until it changes the state
 202:	89 b3       	in	r24, 0x19	; 25
 204:	83 fb       	bst	r24, 3
 206:	99 27       	eor	r25, r25
 208:	90 f9       	bld	r25, 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	89 27       	eor	r24, r25
		if (numloops++ == maxloops) break;
 20e:	02 e2       	ldi	r16, 0x22	; 34
 210:	11 ea       	ldi	r17, 0xA1	; 161
 212:	27 e0       	ldi	r18, 0x07	; 7
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	73 cf       	rjmp	.-282    	; 0xfe <TCSMeasure+0x78>
		width++;
	}

	float RC_VALUE = width/16;
	return RC_VALUE;
}
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	df 90       	pop	r13
 222:	cf 90       	pop	r12
 224:	08 95       	ret

00000226 <MeasureR>:
	}

}

int MeasureR()
{
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
	TCSSelectRed();
 22e:	0e 94 36 00 	call	0x6c	; 0x6c <TCSSelectRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	89 ef       	ldi	r24, 0xF9	; 249
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <MeasureR+0x10>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <MeasureR+0x16>
 23c:	00 00       	nop
	int r;

	_delay_ms(1);
	r=TCSMeasure();
 23e:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>
 242:	6b 01       	movw	r12, r22
 244:	7c 01       	movw	r14, r24
 246:	89 ef       	ldi	r24, 0xF9	; 249
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <MeasureR+0x24>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <MeasureR+0x2a>
 250:	00 00       	nop

	_delay_ms(1);
	r+=TCSMeasure();
 252:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>
 256:	c6 0e       	add	r12, r22
 258:	d7 1e       	adc	r13, r23
 25a:	89 ef       	ldi	r24, 0xF9	; 249
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <MeasureR+0x38>
 262:	00 c0       	rjmp	.+0      	; 0x264 <MeasureR+0x3e>
 264:	00 00       	nop

	_delay_ms(1);
	r+=TCSMeasure();
 266:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>

	return r;
 26a:	c6 01       	movw	r24, r12
 26c:	86 0f       	add	r24, r22
 26e:	97 1f       	adc	r25, r23

}
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	08 95       	ret

0000027a <MeasureG>:

int MeasureG()
{
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
	TCSSelectGreen();
 282:	0e 94 39 00 	call	0x72	; 0x72 <TCSSelectGreen>
 286:	89 ef       	ldi	r24, 0xF9	; 249
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <MeasureG+0x10>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <MeasureG+0x16>
 290:	00 00       	nop
	int r;

	_delay_ms(1);
	r=TCSMeasure();
 292:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>
 296:	6b 01       	movw	r12, r22
 298:	7c 01       	movw	r14, r24
 29a:	89 ef       	ldi	r24, 0xF9	; 249
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <MeasureG+0x24>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <MeasureG+0x2a>
 2a4:	00 00       	nop

	_delay_ms(1);
	r+=TCSMeasure();
 2a6:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>
 2aa:	c6 0e       	add	r12, r22
 2ac:	d7 1e       	adc	r13, r23
 2ae:	89 ef       	ldi	r24, 0xF9	; 249
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <MeasureG+0x38>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <MeasureG+0x3e>
 2b8:	00 00       	nop

	_delay_ms(1);
	r+=TCSMeasure();
 2ba:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>

	return r;
 2be:	c6 01       	movw	r24, r12
 2c0:	86 0f       	add	r24, r22
 2c2:	97 1f       	adc	r25, r23

}
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	08 95       	ret

000002ce <MeasureB>:

int MeasureB()
{
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
	TCSSelectBlue();
 2d6:	0e 94 3d 00 	call	0x7a	; 0x7a <TCSSelectBlue>
 2da:	89 ef       	ldi	r24, 0xF9	; 249
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <MeasureB+0x10>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <MeasureB+0x16>
 2e4:	00 00       	nop
	int r;

	_delay_ms(1);
	r=TCSMeasure();
 2e6:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>
 2ea:	6b 01       	movw	r12, r22
 2ec:	7c 01       	movw	r14, r24
 2ee:	89 ef       	ldi	r24, 0xF9	; 249
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <MeasureB+0x24>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <MeasureB+0x2a>
 2f8:	00 00       	nop

	_delay_ms(1);
	r+=TCSMeasure();
 2fa:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>
 2fe:	c6 0e       	add	r12, r22
 300:	d7 1e       	adc	r13, r23
 302:	89 ef       	ldi	r24, 0xF9	; 249
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <MeasureB+0x38>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <MeasureB+0x3e>
 30c:	00 00       	nop

	_delay_ms(1);
	r+=TCSMeasure();
 30e:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>

	return r;
 312:	c6 01       	movw	r24, r12
 314:	86 0f       	add	r24, r22
 316:	97 1f       	adc	r25, r23

}
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	08 95       	ret

00000322 <MeasureC>:

int MeasureC()
{
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
	TCSSelectClear();
 32a:	0e 94 40 00 	call	0x80	; 0x80 <TCSSelectClear>
 32e:	89 ef       	ldi	r24, 0xF9	; 249
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <MeasureC+0x10>
 336:	00 c0       	rjmp	.+0      	; 0x338 <MeasureC+0x16>
 338:	00 00       	nop
	int r;

	_delay_ms(1);
	r=TCSMeasure();
 33a:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>
 33e:	6b 01       	movw	r12, r22
 340:	7c 01       	movw	r14, r24
 342:	89 ef       	ldi	r24, 0xF9	; 249
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <MeasureC+0x24>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <MeasureC+0x2a>
 34c:	00 00       	nop

	_delay_ms(1);
	r+=TCSMeasure();
 34e:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>
 352:	c6 0e       	add	r12, r22
 354:	d7 1e       	adc	r13, r23
 356:	89 ef       	ldi	r24, 0xF9	; 249
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <MeasureC+0x38>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <MeasureC+0x3e>
 360:	00 00       	nop

	_delay_ms(1);
	r+=TCSMeasure();
 362:	0e 94 43 00 	call	0x86	; 0x86 <TCSMeasure>

	return r;
 366:	c6 01       	movw	r24, r12
 368:	86 0f       	add	r24, r22
 36a:	97 1f       	adc	r25, r23
}
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	08 95       	ret

00000376 <main>:



int main(void)
{
	DDRD = 0xFF;
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b11110111;
 37a:	97 ef       	ldi	r25, 0xF7	; 247
 37c:	9a bb       	out	0x1a, r25	; 26
	DDRB = 0xFF;
 37e:	87 bb       	out	0x17, r24	; 23
	PORTA = ( 1 << PINA4);
 380:	80 e1       	ldi	r24, 0x10	; 16
 382:	8b bb       	out	0x1b, r24	; 27
	//PORTA = ( 1 << PINA5);

	TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0 | 1<<COM1B1 | 1<<COM1B0 ;
 384:	8f b5       	in	r24, 0x2f	; 47
 386:	82 6f       	ori	r24, 0xF2	; 242
 388:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS10;
 38a:	8e b5       	in	r24, 0x2e	; 46
 38c:	89 61       	ori	r24, 0x19	; 25
 38e:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
 390:	8f e1       	ldi	r24, 0x1F	; 31
 392:	9e e4       	ldi	r25, 0x4E	; 78
 394:	97 bd       	out	0x27, r25	; 39
 396:	86 bd       	out	0x26, r24	; 38
			
			
 		}
 		else if(smallest == b)
 		{
			  OCR1B = 18150;
 398:	0f 2e       	mov	r0, r31
 39a:	f6 ee       	ldi	r31, 0xE6	; 230
 39c:	4f 2e       	mov	r4, r31
 39e:	f6 e4       	ldi	r31, 0x46	; 70
 3a0:	5f 2e       	mov	r5, r31
 3a2:	f0 2d       	mov	r31, r0
			  _delay_ms(1000);
			  OCR1A = 19100;
 3a4:	0f 2e       	mov	r0, r31
 3a6:	fc e9       	ldi	r31, 0x9C	; 156
 3a8:	af 2e       	mov	r10, r31
 3aa:	fa e4       	ldi	r31, 0x4A	; 74
 3ac:	bf 2e       	mov	r11, r31
 3ae:	f0 2d       	mov	r31, r0
			
			PORTB = ( 1 << PINB4);
			_delay_ms(1000);
			 OCR1A = 17800;
 3b0:	0f 2e       	mov	r0, r31
 3b2:	f8 e8       	ldi	r31, 0x88	; 136
 3b4:	cf 2e       	mov	r12, r31
 3b6:	f5 e4       	ldi	r31, 0x45	; 69
 3b8:	df 2e       	mov	r13, r31
 3ba:	f0 2d       	mov	r31, r0
			 
 			
 		}
 		else if(smallest==r)
 		{
			   OCR1B = 18700;//color header
 3bc:	0f 2e       	mov	r0, r31
 3be:	fc e0       	ldi	r31, 0x0C	; 12
 3c0:	6f 2e       	mov	r6, r31
 3c2:	f9 e4       	ldi	r31, 0x49	; 73
 3c4:	7f 2e       	mov	r7, r31
 3c6:	f0 2d       	mov	r31, r0
			   _delay_ms(1000);
			  OCR1A = 19100;//ball mover
			
			 PORTB = ( 1<< PINB2);
 3c8:	68 94       	set
 3ca:	22 24       	eor	r2, r2
 3cc:	22 f8       	bld	r2, 2
		}*/
   
   
 		if(smallest==g)
 		{
			  OCR1B = 19200;//color header
 3ce:	0f 2e       	mov	r0, r31
 3d0:	81 2c       	mov	r8, r1
 3d2:	fb e4       	ldi	r31, 0x4B	; 75
 3d4:	9f 2e       	mov	r9, r31
 3d6:	f0 2d       	mov	r31, r0
			  _delay_ms(1000);
			  OCR1A = 19100;//ball mover
			
			 PORTB = ( 1 << PINB3);
 3d8:	68 94       	set
 3da:	33 24       	eor	r3, r3
 3dc:	33 f8       	bld	r3, 3
 3de:	2f e7       	ldi	r18, 0x7F	; 127
 3e0:	8a e1       	ldi	r24, 0x1A	; 26
 3e2:	96 e0       	ldi	r25, 0x06	; 6
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x6e>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x78>
 3ee:	00 00       	nop
		
		_delay_ms(2000);
		
		int r,g,b,c;

		r=MeasureR();
 3f0:	0e 94 13 01 	call	0x226	; 0x226 <MeasureR>
 3f4:	ec 01       	movw	r28, r24
		g=MeasureG();
 3f6:	0e 94 3d 01 	call	0x27a	; 0x27a <MeasureG>
 3fa:	8c 01       	movw	r16, r24
		b=MeasureB();
 3fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <MeasureB>
 400:	7c 01       	movw	r14, r24
		c=MeasureC();
 402:	0e 94 91 01 	call	0x322	; 0x322 <MeasureC>

		int smallest;

		if(r<b)
 406:	ce 15       	cp	r28, r14
 408:	df 05       	cpc	r29, r15
 40a:	34 f4       	brge	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40c:	ce 01       	movw	r24, r28
 40e:	0c 17       	cp	r16, r28
 410:	1d 07       	cpc	r17, r29
 412:	3c f4       	brge	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 414:	c8 01       	movw	r24, r16
 416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 418:	c8 01       	movw	r24, r16
 41a:	e0 16       	cp	r14, r16
 41c:	f1 06       	cpc	r15, r17
 41e:	0c f4       	brge	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	c7 01       	movw	r24, r14
		// smallest = g;
			
		}*/
   
   
 		if(smallest==g)
 422:	80 17       	cp	r24, r16
 424:	91 07       	cpc	r25, r17
 426:	d1 f4       	brne	.+52     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 		{
			  OCR1B = 19200;//color header
 428:	99 bc       	out	0x29, r9	; 41
 42a:	88 bc       	out	0x28, r8	; 40
 42c:	2f e3       	ldi	r18, 0x3F	; 63
 42e:	8d e0       	ldi	r24, 0x0D	; 13
 430:	93 e0       	ldi	r25, 0x03	; 3
 432:	21 50       	subi	r18, 0x01	; 1
 434:	80 40       	sbci	r24, 0x00	; 0
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
			  _delay_ms(1000);
			  OCR1A = 19100;//ball mover
 43e:	bb bc       	out	0x2b, r11	; 43
 440:	aa bc       	out	0x2a, r10	; 42
			
			 PORTB = ( 1 << PINB3);
 442:	38 ba       	out	0x18, r3	; 24
 444:	2f e3       	ldi	r18, 0x3F	; 63
 446:	8d e0       	ldi	r24, 0x0D	; 13
 448:	93 e0       	ldi	r25, 0x03	; 3
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 454:	00 00       	nop
			 _delay_ms(1000);
			 OCR1A = 17800;//ball initial position
 456:	db bc       	out	0x2b, r13	; 43
 458:	ca bc       	out	0x2a, r12	; 42
 45a:	c1 cf       	rjmp	.-126    	; 0x3de <main+0x68>
			 
			 
 			
 		}
 		else if(smallest==r)
 45c:	8c 17       	cp	r24, r28
 45e:	9d 07       	cpc	r25, r29
 460:	d1 f4       	brne	.+52     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 		{
			   OCR1B = 18700;//color header
 462:	79 bc       	out	0x29, r7	; 41
 464:	68 bc       	out	0x28, r6	; 40
 466:	2f e3       	ldi	r18, 0x3F	; 63
 468:	8d e0       	ldi	r24, 0x0D	; 13
 46a:	93 e0       	ldi	r25, 0x03	; 3
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 476:	00 00       	nop
			   _delay_ms(1000);
			  OCR1A = 19100;//ball mover
 478:	bb bc       	out	0x2b, r11	; 43
 47a:	aa bc       	out	0x2a, r10	; 42
			
			 PORTB = ( 1<< PINB2);
 47c:	28 ba       	out	0x18, r2	; 24
 47e:	2f e3       	ldi	r18, 0x3F	; 63
 480:	8d e0       	ldi	r24, 0x0D	; 13
 482:	93 e0       	ldi	r25, 0x03	; 3
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
			  _delay_ms(1000);
			 OCR1A = 17800;//ball init pos.
 490:	db bc       	out	0x2b, r13	; 43
 492:	ca bc       	out	0x2a, r12	; 42
 494:	a4 cf       	rjmp	.-184    	; 0x3de <main+0x68>
			
			
			
 		}
 		else if(smallest == b)
 496:	8e 15       	cp	r24, r14
 498:	9f 05       	cpc	r25, r15
 49a:	09 f0       	breq	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	a0 cf       	rjmp	.-192    	; 0x3de <main+0x68>
 		{
			  OCR1B = 18150;
 49e:	59 bc       	out	0x29, r5	; 41
 4a0:	48 bc       	out	0x28, r4	; 40
 4a2:	2f e3       	ldi	r18, 0x3F	; 63
 4a4:	8d e0       	ldi	r24, 0x0D	; 13
 4a6:	93 e0       	ldi	r25, 0x03	; 3
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
			  _delay_ms(1000);
			  OCR1A = 19100;
 4b4:	bb bc       	out	0x2b, r11	; 43
 4b6:	aa bc       	out	0x2a, r10	; 42
			
			PORTB = ( 1 << PINB4);
 4b8:	20 e1       	ldi	r18, 0x10	; 16
 4ba:	28 bb       	out	0x18, r18	; 24
 4bc:	8f e3       	ldi	r24, 0x3F	; 63
 4be:	9d e0       	ldi	r25, 0x0D	; 13
 4c0:	23 e0       	ldi	r18, 0x03	; 3
 4c2:	81 50       	subi	r24, 0x01	; 1
 4c4:	90 40       	sbci	r25, 0x00	; 0
 4c6:	20 40       	sbci	r18, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
			_delay_ms(1000);
			 OCR1A = 17800;
 4ce:	db bc       	out	0x2b, r13	; 43
 4d0:	ca bc       	out	0x2a, r12	; 42
 4d2:	85 cf       	rjmp	.-246    	; 0x3de <main+0x68>

000004d4 <__fixunssfsi>:
 4d4:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_splitA>
 4d8:	88 f0       	brcs	.+34     	; 0x4fc <__fixunssfsi+0x28>
 4da:	9f 57       	subi	r25, 0x7F	; 127
 4dc:	98 f0       	brcs	.+38     	; 0x504 <__fixunssfsi+0x30>
 4de:	b9 2f       	mov	r27, r25
 4e0:	99 27       	eor	r25, r25
 4e2:	b7 51       	subi	r27, 0x17	; 23
 4e4:	b0 f0       	brcs	.+44     	; 0x512 <__fixunssfsi+0x3e>
 4e6:	e1 f0       	breq	.+56     	; 0x520 <__fixunssfsi+0x4c>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	1a f0       	brmi	.+6      	; 0x4f8 <__fixunssfsi+0x24>
 4f2:	ba 95       	dec	r27
 4f4:	c9 f7       	brne	.-14     	; 0x4e8 <__fixunssfsi+0x14>
 4f6:	14 c0       	rjmp	.+40     	; 0x520 <__fixunssfsi+0x4c>
 4f8:	b1 30       	cpi	r27, 0x01	; 1
 4fa:	91 f0       	breq	.+36     	; 0x520 <__fixunssfsi+0x4c>
 4fc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_zero>
 500:	b1 e0       	ldi	r27, 0x01	; 1
 502:	08 95       	ret
 504:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_zero>
 508:	67 2f       	mov	r22, r23
 50a:	78 2f       	mov	r23, r24
 50c:	88 27       	eor	r24, r24
 50e:	b8 5f       	subi	r27, 0xF8	; 248
 510:	39 f0       	breq	.+14     	; 0x520 <__fixunssfsi+0x4c>
 512:	b9 3f       	cpi	r27, 0xF9	; 249
 514:	cc f3       	brlt	.-14     	; 0x508 <__fixunssfsi+0x34>
 516:	86 95       	lsr	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b3 95       	inc	r27
 51e:	d9 f7       	brne	.-10     	; 0x516 <__fixunssfsi+0x42>
 520:	3e f4       	brtc	.+14     	; 0x530 <__fixunssfsi+0x5c>
 522:	90 95       	com	r25
 524:	80 95       	com	r24
 526:	70 95       	com	r23
 528:	61 95       	neg	r22
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	8f 4f       	sbci	r24, 0xFF	; 255
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	08 95       	ret

00000532 <__floatunsisf>:
 532:	e8 94       	clt
 534:	09 c0       	rjmp	.+18     	; 0x548 <__floatsisf+0x12>

00000536 <__floatsisf>:
 536:	97 fb       	bst	r25, 7
 538:	3e f4       	brtc	.+14     	; 0x548 <__floatsisf+0x12>
 53a:	90 95       	com	r25
 53c:	80 95       	com	r24
 53e:	70 95       	com	r23
 540:	61 95       	neg	r22
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	99 23       	and	r25, r25
 54a:	a9 f0       	breq	.+42     	; 0x576 <__floatsisf+0x40>
 54c:	f9 2f       	mov	r31, r25
 54e:	96 e9       	ldi	r25, 0x96	; 150
 550:	bb 27       	eor	r27, r27
 552:	93 95       	inc	r25
 554:	f6 95       	lsr	r31
 556:	87 95       	ror	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b7 95       	ror	r27
 55e:	f1 11       	cpse	r31, r1
 560:	f8 cf       	rjmp	.-16     	; 0x552 <__floatsisf+0x1c>
 562:	fa f4       	brpl	.+62     	; 0x5a2 <__floatsisf+0x6c>
 564:	bb 0f       	add	r27, r27
 566:	11 f4       	brne	.+4      	; 0x56c <__floatsisf+0x36>
 568:	60 ff       	sbrs	r22, 0
 56a:	1b c0       	rjmp	.+54     	; 0x5a2 <__floatsisf+0x6c>
 56c:	6f 5f       	subi	r22, 0xFF	; 255
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	8f 4f       	sbci	r24, 0xFF	; 255
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	16 c0       	rjmp	.+44     	; 0x5a2 <__floatsisf+0x6c>
 576:	88 23       	and	r24, r24
 578:	11 f0       	breq	.+4      	; 0x57e <__floatsisf+0x48>
 57a:	96 e9       	ldi	r25, 0x96	; 150
 57c:	11 c0       	rjmp	.+34     	; 0x5a0 <__floatsisf+0x6a>
 57e:	77 23       	and	r23, r23
 580:	21 f0       	breq	.+8      	; 0x58a <__floatsisf+0x54>
 582:	9e e8       	ldi	r25, 0x8E	; 142
 584:	87 2f       	mov	r24, r23
 586:	76 2f       	mov	r23, r22
 588:	05 c0       	rjmp	.+10     	; 0x594 <__floatsisf+0x5e>
 58a:	66 23       	and	r22, r22
 58c:	71 f0       	breq	.+28     	; 0x5aa <__floatsisf+0x74>
 58e:	96 e8       	ldi	r25, 0x86	; 134
 590:	86 2f       	mov	r24, r22
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	2a f0       	brmi	.+10     	; 0x5a2 <__floatsisf+0x6c>
 598:	9a 95       	dec	r25
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	88 1f       	adc	r24, r24
 5a0:	da f7       	brpl	.-10     	; 0x598 <__floatsisf+0x62>
 5a2:	88 0f       	add	r24, r24
 5a4:	96 95       	lsr	r25
 5a6:	87 95       	ror	r24
 5a8:	97 f9       	bld	r25, 7
 5aa:	08 95       	ret

000005ac <__fp_split3>:
 5ac:	57 fd       	sbrc	r21, 7
 5ae:	90 58       	subi	r25, 0x80	; 128
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	59 f0       	breq	.+22     	; 0x5cc <__fp_splitA+0x10>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <__fp_splitA+0x1a>
 5ba:	47 95       	ror	r20

000005bc <__fp_splitA>:
 5bc:	88 0f       	add	r24, r24
 5be:	97 fb       	bst	r25, 7
 5c0:	99 1f       	adc	r25, r25
 5c2:	61 f0       	breq	.+24     	; 0x5dc <__fp_splitA+0x20>
 5c4:	9f 3f       	cpi	r25, 0xFF	; 255
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <__fp_splitA+0x2a>
 5c8:	87 95       	ror	r24
 5ca:	08 95       	ret
 5cc:	12 16       	cp	r1, r18
 5ce:	13 06       	cpc	r1, r19
 5d0:	14 06       	cpc	r1, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	f2 cf       	rjmp	.-28     	; 0x5ba <__fp_split3+0xe>
 5d6:	46 95       	lsr	r20
 5d8:	f1 df       	rcall	.-30     	; 0x5bc <__fp_splitA>
 5da:	08 c0       	rjmp	.+16     	; 0x5ec <__fp_splitA+0x30>
 5dc:	16 16       	cp	r1, r22
 5de:	17 06       	cpc	r1, r23
 5e0:	18 06       	cpc	r1, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	f1 cf       	rjmp	.-30     	; 0x5c8 <__fp_splitA+0xc>
 5e6:	86 95       	lsr	r24
 5e8:	71 05       	cpc	r23, r1
 5ea:	61 05       	cpc	r22, r1
 5ec:	08 94       	sec
 5ee:	08 95       	ret

000005f0 <__fp_zero>:
 5f0:	e8 94       	clt

000005f2 <__fp_szero>:
 5f2:	bb 27       	eor	r27, r27
 5f4:	66 27       	eor	r22, r22
 5f6:	77 27       	eor	r23, r23
 5f8:	cb 01       	movw	r24, r22
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
