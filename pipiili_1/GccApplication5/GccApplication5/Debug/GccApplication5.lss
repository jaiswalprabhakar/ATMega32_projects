
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d6  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000513  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020a  00000000  00000000  00000c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000118f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/sfr_defs.h>

int main()
{
	DDRA = 11111111;
  6c:	87 ec       	ldi	r24, 0xC7	; 199
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 00000000;
  70:	11 ba       	out	0x11, r1	; 17
		ir2 = bit_is_clear(PIND,4);
		ir3 = bit_is_clear(PIND,5);
		if(ir2==1 && ir1==0 && ir3==0)
		{
			
			PORTA = 0b10100000;
  72:	50 ea       	ldi	r21, 0xA0	; 160
	DDRD = 00000000;
	
	int ir1,ir2,ir3,ir4,ir5;
	
	while(1){
		ir1 = bit_is_clear(PIND,3);
  74:	80 b3       	in	r24, 0x10	; 16
  76:	88 70       	andi	r24, 0x08	; 8
  78:	90 e0       	ldi	r25, 0x00	; 0
		ir2 = bit_is_clear(PIND,4);
  7a:	40 b3       	in	r20, 0x10	; 16
		ir3 = bit_is_clear(PIND,5);
  7c:	20 b3       	in	r18, 0x10	; 16
  7e:	20 72       	andi	r18, 0x20	; 32
  80:	30 e0       	ldi	r19, 0x00	; 0
		if(ir2==1 && ir1==0 && ir3==0)
  82:	44 fd       	sbrc	r20, 4
  84:	0a c0       	rjmp	.+20     	; 0x9a <main+0x2e>
  86:	89 2b       	or	r24, r25
  88:	a9 f3       	breq	.-22     	; 0x74 <main+0x8>
  8a:	23 2b       	or	r18, r19
  8c:	99 f3       	breq	.-26     	; 0x74 <main+0x8>
		{
			
			PORTA = 0b10100000;
  8e:	5b bb       	out	0x1b, r21	; 27
  90:	f1 cf       	rjmp	.-30     	; 0x74 <main+0x8>
			
		}
		if(ir2 == 0 && ir1 == 0 && ir3 == 0)
  92:	23 2b       	or	r18, r19
  94:	79 f3       	breq	.-34     	; 0x74 <main+0x8>
		{
			
			PORTA = 0b00000000;
  96:	1b ba       	out	0x1b, r1	; 27
  98:	ed cf       	rjmp	.-38     	; 0x74 <main+0x8>
		{
			
			PORTA = 0b10100000;
			
		}
		if(ir2 == 0 && ir1 == 0 && ir3 == 0)
  9a:	89 2b       	or	r24, r25
  9c:	d1 f7       	brne	.-12     	; 0x92 <main+0x26>
  9e:	ea cf       	rjmp	.-44     	; 0x74 <main+0x8>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
