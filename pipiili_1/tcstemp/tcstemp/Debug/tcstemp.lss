
tcstemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000769  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b2  00000000  00000000  000009a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TCSSelectRed>:
}

void TCSSelectClear()
{
	PORTA |= (1 << PINA0);
	PORTA &= ~(1 << PINA1);
  6c:	d8 98       	cbi	0x1b, 0	; 27
  6e:	d9 98       	cbi	0x1b, 1	; 27
  70:	08 95       	ret

00000072 <TCSSelectBlue>:
  72:	d8 98       	cbi	0x1b, 0	; 27
  74:	d9 9a       	sbi	0x1b, 1	; 27
  76:	08 95       	ret

00000078 <TCSMeasure>:
	//TCSS3Low();
}

int TCSMeasure()
{
	if(bit_is_set(PINB,4)==0)
  78:	b4 99       	sbic	0x16, 4	; 22
  7a:	02 c0       	rjmp	.+4      	; 0x80 <TCSMeasure+0x8>
	{
		while(bit_is_set(PINB,4)==0);   //Wait for rising edge
  7c:	b4 9b       	sbis	0x16, 4	; 22
  7e:	fe cf       	rjmp	.-4      	; 0x7c <TCSMeasure+0x4>
	}

	while(bit_is_set(PINB,4)==1);   //Wait for falling edge
  80:	86 b3       	in	r24, 0x16	; 22
	
	

	TCNT1=0x0000;//Reset Counter
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44

	TCCR1B=(1<<CS10); //Prescaller = F_CPU/1 (Start Counting)
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	8e bd       	out	0x2e, r24	; 46

	while(bit_is_set(PINB,4)==0);   //Wait for rising edge
  8a:	b4 9b       	sbis	0x16, 4	; 22
  8c:	fe cf       	rjmp	.-4      	; 0x8a <TCSMeasure+0x12>
	int R=TCNT1;
  8e:	8c b5       	in	r24, 0x2c	; 44
  90:	9d b5       	in	r25, 0x2d	; 45
	//float f=8000000/R;
	
	//Stop Timer
	TCCR1B=0x00;
  92:	1e bc       	out	0x2e, r1	; 46

	return R;
}
  94:	08 95       	ret

00000096 <MeasureR>:

}

int MeasureR()
{
	TCSSelectRed();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <TCSSelectRed>
	int r;

	//_delay_ms(1);
	r=TCSMeasure();
  9a:	0e 94 3c 00 	call	0x78	; 0x78 <TCSMeasure>
	//_delay_ms(10);
	r+=TCSMeasure();
	*/
	return r;

}
  9e:	08 95       	ret

000000a0 <MeasureG>:
	
}

void TCSSelectGreen()
{
	PORTA = (1 << PINA0) | (1 << PINA1);
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	8b bb       	out	0x1b, r24	; 27
{
	TCSSelectGreen();
	int r;

	//_delay_ms(10);
	r=TCSMeasure();
  a4:	0e 94 3c 00 	call	0x78	; 0x78 <TCSMeasure>
	//_delay_ms(10);
	r+=TCSMeasure();
	*/
	return r;

}
  a8:	08 95       	ret

000000aa <MeasureB>:

int MeasureB()
{
	TCSSelectBlue();
  aa:	0e 94 39 00 	call	0x72	; 0x72 <TCSSelectBlue>
	int r;

	//_delay_ms(10);
	r=TCSMeasure();
  ae:	0e 94 3c 00 	call	0x78	; 0x78 <TCSMeasure>
	//_delay_ms(10);
	r+=TCSMeasure();
	*/
	return r;

}
  b2:	08 95       	ret

000000b4 <main>:
	return R;
}

int main(void)
{
	DDRB = 0x00;
  b4:	17 ba       	out	0x17, r1	; 23
	DDRA = 0b00001111;
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	8a bb       	out	0x1a, r24	; 26
			{
				PORTA = (1 << PINA4);
			}
			else if(smallest==r)
			{
			   PORTA = (1 << PINA5);	
  ba:	68 94       	set
  bc:	ee 24       	eor	r14, r14
  be:	e5 f8       	bld	r14, 5
			
			
			
			if(smallest==g)
			{
				PORTA = (1 << PINA4);
  c0:	68 94       	set
  c2:	ff 24       	eor	r15, r15
  c4:	f4 f8       	bld	r15, 4
			{
			   PORTA = (1 << PINA5);	
			}
			else if(smallest == b)
			{
			   PORTC = (1 << PINA6);	
  c6:	68 94       	set
  c8:	dd 24       	eor	r13, r13
  ca:	d6 f8       	bld	r13, 6
	{
		
			int r,g,b;
			

			r=MeasureR();
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <MeasureR>
  d0:	8c 01       	movw	r16, r24
			g=MeasureG();
  d2:	0e 94 50 00 	call	0xa0	; 0xa0 <MeasureG>
  d6:	ec 01       	movw	r28, r24
			b=MeasureB();
  d8:	0e 94 55 00 	call	0xaa	; 0xaa <MeasureB>

	
			
			
			
			if((r>g) && (r>b))
  dc:	c0 17       	cp	r28, r16
  de:	d1 07       	cpc	r29, r17
  e0:	1c f4       	brge	.+6      	; 0xe8 <main+0x34>
  e2:	80 17       	cp	r24, r16
  e4:	91 07       	cpc	r25, r17
  e6:	94 f0       	brlt	.+36     	; 0x10c <main+0x58>
			{
				smallest=r;
				//else
				//smallest=g;
			}
			else if ((g>b) && (g>r))
  e8:	8c 17       	cp	r24, r28
  ea:	9d 07       	cpc	r25, r29
  ec:	1c f4       	brge	.+6      	; 0xf4 <main+0x40>
  ee:	0c 17       	cp	r16, r28
  f0:	1d 07       	cpc	r17, r29
  f2:	1c f0       	brlt	.+6      	; 0xfa <main+0x46>
				smallest=b;
			}
			
			
			
			if(smallest==g)
  f4:	c8 17       	cp	r28, r24
  f6:	d9 07       	cpc	r29, r25
  f8:	11 f4       	brne	.+4      	; 0xfe <main+0x4a>
			{
				PORTA = (1 << PINA4);
  fa:	fb ba       	out	0x1b, r15	; 27
  fc:	e7 cf       	rjmp	.-50     	; 0xcc <main+0x18>
			}
			else if(smallest==r)
  fe:	08 17       	cp	r16, r24
 100:	19 07       	cpc	r17, r25
 102:	11 f4       	brne	.+4      	; 0x108 <main+0x54>
			{
			   PORTA = (1 << PINA5);	
 104:	eb ba       	out	0x1b, r14	; 27
 106:	e2 cf       	rjmp	.-60     	; 0xcc <main+0x18>
			}
			else if(smallest == b)
			{
			   PORTC = (1 << PINA6);	
 108:	d5 ba       	out	0x15, r13	; 21
 10a:	e0 cf       	rjmp	.-64     	; 0xcc <main+0x18>
				smallest=b;
			}
			
			
			
			if(smallest==g)
 10c:	0c 17       	cp	r16, r28
 10e:	1d 07       	cpc	r17, r29
 110:	c9 f7       	brne	.-14     	; 0x104 <main+0x50>
 112:	f3 cf       	rjmp	.-26     	; 0xfa <main+0x46>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
