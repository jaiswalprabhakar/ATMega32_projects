
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ae  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ce  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000346  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036d  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f1  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  8a:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_motor>:
dir 3 - rev
*/ 

/*  ---- ONLY FOR IR Sensor ----  */
void set_motor(int type,int dir){
	if(type == 1){ // -------------- LEft Motor --------------------
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	61 f5       	brne	.+88     	; 0xee <set_motor+0x5c>
		if(dir == 1){ // Forward Direction [ Left Motor ]
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	71 05       	cpc	r23, r1
  9a:	61 f4       	brne	.+24     	; 0xb4 <set_motor+0x22>
			
			left_motor_line1 = 1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <left_motor_line1+0x1>
  a4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <left_motor_line1>
			left_motor_line2 = 0;
  a8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <left_motor_line2+0x1>
  ac:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <left_motor_line2>
			
			PORTA |= 0b10000000;
  b0:	df 9a       	sbi	0x1b, 7	; 27
  b2:	08 95       	ret
			
		}
		
		if(dir == 2){ // Stop Now [ Left Motor ]
  b4:	62 30       	cpi	r22, 0x02	; 2
  b6:	71 05       	cpc	r23, r1
  b8:	59 f4       	brne	.+22     	; 0xd0 <set_motor+0x3e>
			
			left_motor_line1 = 0;
  ba:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <left_motor_line1+0x1>
  be:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <left_motor_line1>
			left_motor_line2 = 0;
  c2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <left_motor_line2+0x1>
  c6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <left_motor_line2>
			PORTA |= 0b00000000;
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	08 95       	ret
		}
		
		if(dir == 3){ // Reverse Direction [ Left Motor ]
  d0:	63 30       	cpi	r22, 0x03	; 3
  d2:	71 05       	cpc	r23, r1
  d4:	b9 f5       	brne	.+110    	; 0x144 <set_motor+0xb2>
			
			left_motor_line1 = 0;
  d6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <left_motor_line1+0x1>
  da:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <left_motor_line1>
			left_motor_line2 = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <left_motor_line2+0x1>
  e6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <left_motor_line2>
			PORTA |= 0b01000000;
  ea:	de 9a       	sbi	0x1b, 6	; 27
  ec:	08 95       	ret
			}
	}else{ // -------------- Right Motor ------------------
		if(dir == 1){ // Forward Right Motor
  ee:	61 30       	cpi	r22, 0x01	; 1
  f0:	71 05       	cpc	r23, r1
  f2:	61 f4       	brne	.+24     	; 0x10c <set_motor+0x7a>
			
			right_motor_line1 = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <right_motor_line1+0x1>
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <right_motor_line1>
			right_motor_line2 = 0;
 100:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 104:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			PORTA |= 0b00100000;
 108:	dd 9a       	sbi	0x1b, 5	; 27
 10a:	08 95       	ret
		
		}
		
		if(dir == 2){ // Stop Motor 
 10c:	62 30       	cpi	r22, 0x02	; 2
 10e:	71 05       	cpc	r23, r1
 110:	59 f4       	brne	.+22     	; 0x128 <set_motor+0x96>
			
			right_motor_line1 = 0;
 112:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <right_motor_line1+0x1>
 116:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <right_motor_line1>
			right_motor_line2 = 0;
 11a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			PORTA |= 0b00000000;
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	8b bb       	out	0x1b, r24	; 27
 126:	08 95       	ret
		}
		if(dir == 3){ // Reverse Motor
 128:	63 30       	cpi	r22, 0x03	; 3
 12a:	71 05       	cpc	r23, r1
 12c:	59 f4       	brne	.+22     	; 0x144 <set_motor+0xb2>
			
			right_motor_line1 = 0;
 12e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <right_motor_line1+0x1>
 132:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <right_motor_line1>
			right_motor_line2 = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			PORTA |= 0b00010000;
 142:	dc 9a       	sbi	0x1b, 4	; 27
 144:	08 95       	ret

00000146 <get_motor_state>:
	}
	
	
	
}
int get_motor_state(int ir1,int ir2,int ir3,int ir4,int ir5){
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17

	if(ir1 == false && ir2 == false && ir3 == true && ir4 == false && ir5 == false)
 14a:	89 2b       	or	r24, r25
 14c:	61 f4       	brne	.+24     	; 0x166 <get_motor_state+0x20>
 14e:	67 2b       	or	r22, r23
 150:	69 f4       	brne	.+26     	; 0x16c <get_motor_state+0x26>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	51 05       	cpc	r21, r1
 156:	69 f4       	brne	.+26     	; 0x172 <get_motor_state+0x2c>
 158:	23 2b       	or	r18, r19
 15a:	71 f4       	brne	.+28     	; 0x178 <get_motor_state+0x32>
 15c:	01 2b       	or	r16, r17
 15e:	79 f4       	brne	.+30     	; 0x17e <get_motor_state+0x38>
		return 0; // 0 - means Straight Path
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e c0       	rjmp	.+28     	; 0x182 <get_motor_state+0x3c>
		
	else
		return 10;
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0b c0       	rjmp	.+22     	; 0x182 <get_motor_state+0x3c>
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 c0       	rjmp	.+16     	; 0x182 <get_motor_state+0x3c>
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	05 c0       	rjmp	.+10     	; 0x182 <get_motor_state+0x3c>
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <get_motor_state+0x3c>
 17e:	8a e0       	ldi	r24, 0x0A	; 10
 180:	90 e0       	ldi	r25, 0x00	; 0
	
}
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <main>:


int main(void)
{
   
   DDRA = 0b11110000;//output(last four pins of A)
 188:	80 ef       	ldi	r24, 0xF0	; 240
 18a:	8a bb       	out	0x1a, r24	; 26
   DDRD = 0b00000000;//input (sensor)
 18c:	11 ba       	out	0x11, r1	; 17
    while (1) 
    {
		
		int interpret = 0;
			// Getting Current State of Each IR Sensor
		ir1 = bit_is_clear(PIND,6);
 18e:	c1 e0       	ldi	r28, 0x01	; 1
 190:	80 b3       	in	r24, 0x10	; 16
 192:	82 95       	swap	r24
 194:	86 95       	lsr	r24
 196:	86 95       	lsr	r24
 198:	83 70       	andi	r24, 0x03	; 3
 19a:	8c 27       	eor	r24, r28
 19c:	81 70       	andi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <ir1>
 1a4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <ir1+0x1>
		ir2 = bit_is_clear(PIND,5);
 1a8:	60 b3       	in	r22, 0x10	; 16
 1aa:	62 95       	swap	r22
 1ac:	66 95       	lsr	r22
 1ae:	67 70       	andi	r22, 0x07	; 7
 1b0:	6c 27       	eor	r22, r28
 1b2:	61 70       	andi	r22, 0x01	; 1
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <ir2>
 1ba:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <ir2+0x1>
		ir3 = bit_is_clear(PIND,4);
 1be:	40 b3       	in	r20, 0x10	; 16
 1c0:	42 95       	swap	r20
 1c2:	4f 70       	andi	r20, 0x0F	; 15
 1c4:	4c 27       	eor	r20, r28
 1c6:	41 70       	andi	r20, 0x01	; 1
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <ir3>
 1ce:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <ir3+0x1>
		ir4 = bit_is_clear(PIND,3);
 1d2:	20 b3       	in	r18, 0x10	; 16
 1d4:	26 95       	lsr	r18
 1d6:	26 95       	lsr	r18
 1d8:	26 95       	lsr	r18
 1da:	2c 27       	eor	r18, r28
 1dc:	21 70       	andi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <ir4>
 1e4:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <ir4+0x1>
		ir5 = bit_is_clear(PIND,2);
 1e8:	00 b3       	in	r16, 0x10	; 16
 1ea:	06 95       	lsr	r16
 1ec:	06 95       	lsr	r16
 1ee:	0c 27       	eor	r16, r28
 1f0:	01 70       	andi	r16, 0x01	; 1
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	00 93 6c 00 	sts	0x006C, r16	; 0x80006c <ir5>
 1f8:	10 93 6d 00 	sts	0x006D, r17	; 0x80006d <ir5+0x1>
			
		// Now Checking Logic for Vehicle Running Setup
		interpret = get_motor_state(ir1,ir2,ir3,ir4,ir5);
 1fc:	0e 94 a3 00 	call	0x146	; 0x146 <get_motor_state>
 200:	8c 01       	movw	r16, r24
	2 - Sharp Right
	3 - Smooth Left
	4 - Smooth Right
	5 - Stop
*/
		if(interpret == 0){ // Straight
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	69 f4       	brne	.+26     	; 0x220 <main+0x98>
			set_motor(1,1);
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,1);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 21e:	1f c0       	rjmp	.+62     	; 0x25e <main+0xd6>
		}
		if(interpret == 1){ // Sharp Left
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 05       	cpc	r25, r1
 224:	69 f4       	brne	.+26     	; 0x240 <main+0xb8>
			set_motor(1,3);
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,1);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 23e:	1f c0       	rjmp	.+62     	; 0x27e <main+0xf6>
		}
		if(interpret == 2){ // Sharp Right
 240:	02 97       	sbiw	r24, 0x02	; 2
 242:	69 f4       	brne	.+26     	; 0x25e <main+0xd6>
			set_motor(1,1);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,3);
 250:	63 e0       	ldi	r22, 0x03	; 3
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 25c:	20 c0       	rjmp	.+64     	; 0x29e <main+0x116>
		}
		if(interpret == 3){ // Smooth Left
 25e:	03 30       	cpi	r16, 0x03	; 3
 260:	11 05       	cpc	r17, r1
 262:	69 f4       	brne	.+26     	; 0x27e <main+0xf6>
			set_motor(1,2);
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,1);
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 27c:	89 cf       	rjmp	.-238    	; 0x190 <main+0x8>
		}
		if(interpret == 4){
 27e:	04 30       	cpi	r16, 0x04	; 4
 280:	11 05       	cpc	r17, r1
 282:	69 f4       	brne	.+26     	; 0x29e <main+0x116>
			set_motor(1,1);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,2);
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 29c:	79 cf       	rjmp	.-270    	; 0x190 <main+0x8>
		}
		if(interpret == 5){
 29e:	05 30       	cpi	r16, 0x05	; 5
 2a0:	11 05       	cpc	r17, r1
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <main+0x11e>
 2a4:	75 cf       	rjmp	.-278    	; 0x190 <main+0x8>
			set_motor(1,2);
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
			set_motor(0,2);
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 49 00 	call	0x92	; 0x92 <set_motor>
 2be:	68 cf       	rjmp	.-304    	; 0x190 <main+0x8>

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
