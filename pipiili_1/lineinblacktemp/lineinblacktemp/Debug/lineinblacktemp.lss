
lineinblacktemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005d2  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000508  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e2  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001647  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/sfr_defs.h>
//#include <util/delay.h>
int ir1,ir2,ir3,ir4,ir5;
int main()
{
	DDRA = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  80:	11 ba       	out	0x11, r1	; 17
	
	while(1){
		
		
		ir1 = bit_is_clear(PIND,2);
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
		
	
		//_delay_us(500);
		if((ir1==1 && ir2 == 1 && ir3 == 0 && ir4 == 1 && ir5 == 1))
		{
			PORTA = 0b10100000;
  8a:	0f 2e       	mov	r0, r31
  8c:	f0 ea       	ldi	r31, 0xA0	; 160
  8e:	ff 2e       	mov	r15, r31
  90:	f0 2d       	mov	r31, r0
		}
		if( ir1==1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0 )
		{
// 			PORTA = 0b00000000;
// 			_delay_us(20);
			PORTA = 0b01100000; // Sharp Right
  92:	a0 e6       	ldi	r26, 0x60	; 96
		}
		if(ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5== 1)
		{
			//PORTA = 0b00000000;
		//	_delay_us(20);
			PORTA = 0b00100000; // Smooth Right
  94:	c0 e2       	ldi	r28, 0x20	; 32
		}
		if((ir1==0 && ir2 == 0 && ir3 == 1 && ir4 == 1 && ir5==1))
		{
			/*PORTA = 0b00000000;
			_delay_us(20);*/
			PORTA = 0b10010000; // Sharp Left
  96:	f0 e9       	ldi	r31, 0x90	; 144
		}
		if((ir1==1 && ir2 == 0 && ir3 == 0 && ir4 == 1 && ir5 == 1))
		{
			//PORTA = 0b00000000;
			//_delay_us(20);
			PORTA = 0b10000000; // Smooth Left
  98:	b0 e8       	ldi	r27, 0x80	; 128
	DDRD = 0x00;
	
	while(1){
		
		
		ir1 = bit_is_clear(PIND,2);
  9a:	20 b3       	in	r18, 0x10	; 16
  9c:	69 2f       	mov	r22, r25
  9e:	58 2f       	mov	r21, r24
  a0:	72 2f       	mov	r23, r18
  a2:	74 70       	andi	r23, 0x04	; 4
  a4:	22 ff       	sbrs	r18, 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x30>
  a8:	64 2f       	mov	r22, r20
  aa:	53 2f       	mov	r21, r19
  ac:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <ir1>
  b0:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <ir1+0x1>
		ir2 = bit_is_clear(PIND,3);
  b4:	20 b3       	in	r18, 0x10	; 16
  b6:	69 2f       	mov	r22, r25
  b8:	58 2f       	mov	r21, r24
  ba:	e2 2f       	mov	r30, r18
  bc:	e8 70       	andi	r30, 0x08	; 8
  be:	23 ff       	sbrs	r18, 3
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x4a>
  c2:	64 2f       	mov	r22, r20
  c4:	53 2f       	mov	r21, r19
  c6:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <ir2>
  ca:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <ir2+0x1>
		ir3 = bit_is_clear(PIND,4);
  ce:	20 b3       	in	r18, 0x10	; 16
  d0:	69 2f       	mov	r22, r25
  d2:	58 2f       	mov	r21, r24
  d4:	12 2f       	mov	r17, r18
  d6:	10 71       	andi	r17, 0x10	; 16
  d8:	24 ff       	sbrs	r18, 4
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x64>
  dc:	64 2f       	mov	r22, r20
  de:	53 2f       	mov	r21, r19
  e0:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <ir3>
  e4:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <ir3+0x1>
		ir4 = bit_is_clear(PIND,5);
  e8:	20 b3       	in	r18, 0x10	; 16
  ea:	69 2f       	mov	r22, r25
  ec:	58 2f       	mov	r21, r24
  ee:	02 2f       	mov	r16, r18
  f0:	00 72       	andi	r16, 0x20	; 32
  f2:	25 ff       	sbrs	r18, 5
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x7e>
  f6:	64 2f       	mov	r22, r20
  f8:	53 2f       	mov	r21, r19
  fa:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
  fe:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
		ir5 = bit_is_clear(PIND,6);
 102:	20 b3       	in	r18, 0x10	; 16
 104:	69 2f       	mov	r22, r25
 106:	58 2f       	mov	r21, r24
 108:	d2 2f       	mov	r29, r18
 10a:	d0 74       	andi	r29, 0x40	; 64
 10c:	26 ff       	sbrs	r18, 6
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x98>
 110:	64 2f       	mov	r22, r20
 112:	53 2f       	mov	r21, r19
 114:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <ir5>
 118:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <ir5+0x1>
		
	
		//_delay_us(500);
		if((ir1==1 && ir2 == 1 && ir3 == 0 && ir4 == 1 && ir5 == 1))
 11c:	71 11       	cpse	r23, r1
 11e:	09 c0       	rjmp	.+18     	; 0x132 <main+0xb6>
 120:	e1 11       	cpse	r30, r1
 122:	07 c0       	rjmp	.+14     	; 0x132 <main+0xb6>
 124:	11 23       	and	r17, r17
 126:	29 f0       	breq	.+10     	; 0x132 <main+0xb6>
 128:	01 11       	cpse	r16, r1
 12a:	03 c0       	rjmp	.+6      	; 0x132 <main+0xb6>
 12c:	d1 11       	cpse	r29, r1
 12e:	01 c0       	rjmp	.+2      	; 0x132 <main+0xb6>
		{
			PORTA = 0b10100000;
 130:	fb ba       	out	0x1b, r15	; 27
		}
		if((ir1==1 && ir2 == 0 && ir3 == 1 && ir4 == 1 && ir5 == 1))
 132:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 136:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 13a:	61 30       	cpi	r22, 0x01	; 1
 13c:	71 05       	cpc	r23, r1
 13e:	09 f0       	breq	.+2      	; 0x142 <main+0xc6>
 140:	3f c0       	rjmp	.+126    	; 0x1c0 <main+0x144>
 142:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 146:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 14a:	67 2b       	or	r22, r23
 14c:	09 f0       	breq	.+2      	; 0x150 <main+0xd4>
 14e:	5a c0       	rjmp	.+180    	; 0x204 <main+0x188>
 150:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 154:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 158:	61 30       	cpi	r22, 0x01	; 1
 15a:	71 05       	cpc	r23, r1
 15c:	e1 f4       	brne	.+56     	; 0x196 <main+0x11a>
 15e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 162:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	71 05       	cpc	r23, r1
 16a:	a9 f4       	brne	.+42     	; 0x196 <main+0x11a>
 16c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 170:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 174:	61 30       	cpi	r22, 0x01	; 1
 176:	71 05       	cpc	r23, r1
 178:	71 f4       	brne	.+28     	; 0x196 <main+0x11a>
		{
			//PORTA = 0b00000000;
			//_delay_us(20);
			PORTA = 0b10000000; // Smooth Left
 17a:	bb bb       	out	0x1b, r27	; 27
		}
		if((ir1==1 && ir2 == 0 && ir3 == 0 && ir4 == 1 && ir5 == 1))
 17c:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 180:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	71 05       	cpc	r23, r1
 188:	d9 f4       	brne	.+54     	; 0x1c0 <main+0x144>
 18a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 18e:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 192:	67 2b       	or	r22, r23
 194:	b9 f5       	brne	.+110    	; 0x204 <main+0x188>
 196:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 19a:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 19e:	67 2b       	or	r22, r23
 1a0:	89 f5       	brne	.+98     	; 0x204 <main+0x188>
 1a2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	61 30       	cpi	r22, 0x01	; 1
 1ac:	71 05       	cpc	r23, r1
 1ae:	51 f5       	brne	.+84     	; 0x204 <main+0x188>
 1b0:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 1b4:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	71 05       	cpc	r23, r1
 1bc:	19 f5       	brne	.+70     	; 0x204 <main+0x188>
		{
			//PORTA = 0b00000000;
			//_delay_us(20);
			PORTA = 0b10000000; // Smooth Left
 1be:	bb bb       	out	0x1b, r27	; 27
		}
		
		if((ir1==0 && ir2 == 0 && ir3 == 0 && ir4 == 1 && ir5==1))
 1c0:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 1c4:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 1c8:	67 2b       	or	r22, r23
 1ca:	f1 f5       	brne	.+124    	; 0x248 <main+0x1cc>
 1cc:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 1d0:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 1d4:	67 2b       	or	r22, r23
 1d6:	09 f0       	breq	.+2      	; 0x1da <main+0x15e>
 1d8:	5b c0       	rjmp	.+182    	; 0x290 <main+0x214>
 1da:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 1de:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 1e2:	67 2b       	or	r22, r23
 1e4:	d9 f4       	brne	.+54     	; 0x21c <main+0x1a0>
 1e6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	71 05       	cpc	r23, r1
 1f2:	a1 f4       	brne	.+40     	; 0x21c <main+0x1a0>
 1f4:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 1f8:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	71 05       	cpc	r23, r1
 200:	69 f4       	brne	.+26     	; 0x21c <main+0x1a0>
		{
		/*	PORTA = 0b00000000;
			_delay_us(20);*/
			PORTA = 0b10010000; // Sharp Left
 202:	fb bb       	out	0x1b, r31	; 27
			
		}
		if((ir1==0 && ir2 == 0 && ir3 == 1 && ir4 == 1 && ir5==1))
 204:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 208:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 20c:	67 2b       	or	r22, r23
 20e:	e1 f4       	brne	.+56     	; 0x248 <main+0x1cc>
 210:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 214:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 218:	67 2b       	or	r22, r23
 21a:	d1 f5       	brne	.+116    	; 0x290 <main+0x214>
 21c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 220:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 224:	61 30       	cpi	r22, 0x01	; 1
 226:	71 05       	cpc	r23, r1
 228:	99 f5       	brne	.+102    	; 0x290 <main+0x214>
 22a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 22e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	71 05       	cpc	r23, r1
 236:	61 f5       	brne	.+88     	; 0x290 <main+0x214>
 238:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 23c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 240:	61 30       	cpi	r22, 0x01	; 1
 242:	71 05       	cpc	r23, r1
 244:	29 f5       	brne	.+74     	; 0x290 <main+0x214>
		{
			/*PORTA = 0b00000000;
			_delay_us(20);*/
			PORTA = 0b10010000; // Sharp Left
 246:	fb bb       	out	0x1b, r31	; 27
			
		}
		
		 if(ir1 == 1 && ir2 == 1 && ir3 == 0 && ir4 == 0 && ir5== 1)
 248:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 24c:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 250:	61 30       	cpi	r22, 0x01	; 1
 252:	71 05       	cpc	r23, r1
 254:	09 f0       	breq	.+2      	; 0x258 <main+0x1dc>
 256:	21 cf       	rjmp	.-446    	; 0x9a <main+0x1e>
 258:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 25c:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 260:	61 30       	cpi	r22, 0x01	; 1
 262:	71 05       	cpc	r23, r1
 264:	09 f0       	breq	.+2      	; 0x268 <main+0x1ec>
 266:	41 c0       	rjmp	.+130    	; 0x2ea <main+0x26e>
 268:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 26c:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 270:	67 2b       	or	r22, r23
 272:	f1 f4       	brne	.+60     	; 0x2b0 <main+0x234>
 274:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 278:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 27c:	67 2b       	or	r22, r23
 27e:	c1 f4       	brne	.+48     	; 0x2b0 <main+0x234>
 280:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 284:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 288:	61 30       	cpi	r22, 0x01	; 1
 28a:	71 05       	cpc	r23, r1
 28c:	89 f4       	brne	.+34     	; 0x2b0 <main+0x234>
		{
			//PORTA = 0b00000000;
			//_delay_us(20);
			PORTA = 0b00100000; // Smooth Right
 28e:	cb bb       	out	0x1b, r28	; 27
		}
		if(ir1 == 1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5== 1)
 290:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 294:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	71 05       	cpc	r23, r1
 29c:	09 f0       	breq	.+2      	; 0x2a0 <main+0x224>
 29e:	fd ce       	rjmp	.-518    	; 0x9a <main+0x1e>
 2a0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 2a4:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 2a8:	61 30       	cpi	r22, 0x01	; 1
 2aa:	71 05       	cpc	r23, r1
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x234>
 2ae:	40 c0       	rjmp	.+128    	; 0x330 <main+0x2b4>
 2b0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 2b4:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	71 05       	cpc	r23, r1
 2bc:	f1 f4       	brne	.+60     	; 0x2fa <main+0x27e>
 2be:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2c6:	67 2b       	or	r22, r23
 2c8:	c1 f4       	brne	.+48     	; 0x2fa <main+0x27e>
 2ca:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 2ce:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 2d2:	61 30       	cpi	r22, 0x01	; 1
 2d4:	71 05       	cpc	r23, r1
 2d6:	89 f4       	brne	.+34     	; 0x2fa <main+0x27e>
		{
			//PORTA = 0b00000000;
		//	_delay_us(20);
			PORTA = 0b00100000; // Smooth Right
 2d8:	cb bb       	out	0x1b, r28	; 27
		}
		
		if( ir1==1 && ir2 == 1 && ir3 == 0 && ir4 == 0 && ir5 == 0 )
 2da:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 2de:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 2e2:	61 30       	cpi	r22, 0x01	; 1
 2e4:	71 05       	cpc	r23, r1
 2e6:	09 f0       	breq	.+2      	; 0x2ea <main+0x26e>
 2e8:	d8 ce       	rjmp	.-592    	; 0x9a <main+0x1e>
 2ea:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 2ee:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 2f2:	61 30       	cpi	r22, 0x01	; 1
 2f4:	71 05       	cpc	r23, r1
 2f6:	09 f0       	breq	.+2      	; 0x2fa <main+0x27e>
 2f8:	d0 ce       	rjmp	.-608    	; 0x9a <main+0x1e>
 2fa:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 2fe:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 302:	67 2b       	or	r22, r23
 304:	e9 f4       	brne	.+58     	; 0x340 <main+0x2c4>
 306:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 30a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 30e:	67 2b       	or	r22, r23
 310:	b9 f4       	brne	.+46     	; 0x340 <main+0x2c4>
 312:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 316:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 31a:	67 2b       	or	r22, r23
 31c:	89 f4       	brne	.+34     	; 0x340 <main+0x2c4>
		{
// 			PORTA = 0b00000000;
// 			_delay_us(20);
			PORTA = 0b01100000; // Sharp Right
 31e:	ab bb       	out	0x1b, r26	; 27
			
		}
		if( ir1==1 && ir2 == 1 && ir3 == 1 && ir4 == 0 && ir5 == 0 )
 320:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <ir1>
 324:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <ir1+0x1>
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	71 05       	cpc	r23, r1
 32c:	09 f0       	breq	.+2      	; 0x330 <main+0x2b4>
 32e:	b5 ce       	rjmp	.-662    	; 0x9a <main+0x1e>
 330:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <ir2>
 334:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <ir2+0x1>
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	71 05       	cpc	r23, r1
 33c:	09 f0       	breq	.+2      	; 0x340 <main+0x2c4>
 33e:	ad ce       	rjmp	.-678    	; 0x9a <main+0x1e>
 340:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <ir3>
 344:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <ir3+0x1>
 348:	61 30       	cpi	r22, 0x01	; 1
 34a:	71 05       	cpc	r23, r1
 34c:	09 f0       	breq	.+2      	; 0x350 <main+0x2d4>
 34e:	a5 ce       	rjmp	.-694    	; 0x9a <main+0x1e>
 350:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 354:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 358:	67 2b       	or	r22, r23
 35a:	09 f0       	breq	.+2      	; 0x35e <main+0x2e2>
 35c:	9e ce       	rjmp	.-708    	; 0x9a <main+0x1e>
 35e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ir5>
 362:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ir5+0x1>
 366:	67 2b       	or	r22, r23
 368:	09 f0       	breq	.+2      	; 0x36c <main+0x2f0>
 36a:	97 ce       	rjmp	.-722    	; 0x9a <main+0x1e>
		{
// 			PORTA = 0b00000000;
// 			_delay_us(20);
			PORTA = 0b01100000; // Sharp Right
 36c:	ab bb       	out	0x1b, r26	; 27
 36e:	95 ce       	rjmp	.-726    	; 0x9a <main+0x1e>

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
