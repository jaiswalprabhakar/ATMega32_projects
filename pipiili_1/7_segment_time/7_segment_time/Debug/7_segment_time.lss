
7_segment_time.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac5  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000684  00000000  00000000  00000e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a3  00000000  00000000  00001505  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000309  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002211  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  74:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <start_comm>:
	while ( ! (TWCR & ( 1<< TWINT )));
	while(( TWSR & 0xF8) != 0x28) ;
}
void stop_comm()
{
	TWCR = ( 1<< TWINT ) | ( 1<< TWEN ) |( 1<< TWSTO ) ;
  7c:	88 e4       	ldi	r24, 0x48	; 72
  7e:	80 b9       	out	0x00, r24	; 0
  80:	11 b8       	out	0x01, r1	; 1
  82:	16 be       	out	0x36, r1	; 54
  84:	84 ea       	ldi	r24, 0xA4	; 164
  86:	86 bf       	out	0x36, r24	; 54
  88:	06 b6       	in	r0, 0x36	; 54
  8a:	07 fe       	sbrs	r0, 7
  8c:	fd cf       	rjmp	.-6      	; 0x88 <start_comm+0xc>
  8e:	81 b1       	in	r24, 0x01	; 1
  90:	88 7f       	andi	r24, 0xF8	; 248
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	e1 f7       	brne	.-8      	; 0x8e <start_comm+0x12>
  96:	08 95       	ret

00000098 <mr_mode>:
  98:	81 ed       	ldi	r24, 0xD1	; 209
  9a:	83 b9       	out	0x03, r24	; 3
  9c:	84 e8       	ldi	r24, 0x84	; 132
  9e:	86 bf       	out	0x36, r24	; 54
  a0:	06 b6       	in	r0, 0x36	; 54
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <mr_mode+0x8>
  a6:	81 b1       	in	r24, 0x01	; 1
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	80 34       	cpi	r24, 0x40	; 64
  ac:	e1 f7       	brne	.-8      	; 0xa6 <mr_mode+0xe>
  ae:	08 95       	ret

000000b0 <mt_mode>:
  b0:	80 ed       	ldi	r24, 0xD0	; 208
  b2:	83 b9       	out	0x03, r24	; 3
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	86 bf       	out	0x36, r24	; 54
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <mt_mode+0x12>
  ba:	81 b1       	in	r24, 0x01	; 1
  bc:	88 7f       	andi	r24, 0xF8	; 248
  be:	88 31       	cpi	r24, 0x18	; 24
  c0:	e1 f7       	brne	.-8      	; 0xba <mt_mode+0xa>
  c2:	06 b6       	in	r0, 0x36	; 54
  c4:	07 fe       	sbrs	r0, 7
  c6:	f9 cf       	rjmp	.-14     	; 0xba <mt_mode+0xa>
  c8:	08 95       	ret

000000ca <data_transmision>:
  ca:	83 b9       	out	0x03, r24	; 3
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	86 bf       	out	0x36, r24	; 54
  d0:	06 b6       	in	r0, 0x36	; 54
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <data_transmision+0x6>
  d6:	81 b1       	in	r24, 0x01	; 1
  d8:	88 7f       	andi	r24, 0xF8	; 248
  da:	88 32       	cpi	r24, 0x28	; 40
  dc:	e1 f7       	brne	.-8      	; 0xd6 <data_transmision+0xc>
  de:	08 95       	ret

000000e0 <data_reception>:
}
uint8_t data_reception()
{
	TWCR = ( 1<< TWINT ) | ( 1<< TWEN ) |( 1<< TWEA ) ;
  e0:	84 ec       	ldi	r24, 0xC4	; 196
  e2:	86 bf       	out	0x36, r24	; 54
	while ( ! (TWCR & ( 1<< TWINT )));
  e4:	06 b6       	in	r0, 0x36	; 54
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <data_reception+0x4>
	while(( TWSR & 0xF8) != 0x50) ;
  ea:	81 b1       	in	r24, 0x01	; 1
  ec:	88 7f       	andi	r24, 0xF8	; 248
  ee:	80 35       	cpi	r24, 0x50	; 80
  f0:	e1 f7       	brne	.-8      	; 0xea <data_reception+0xa>
	return( TWDR );
  f2:	83 b1       	in	r24, 0x03	; 3
}
  f4:	08 95       	ret

000000f6 <nack>:
uint8_t nack()
{
	TWCR = (1<<TWINT ) |  ( 1<<TWEN  )  ;//data byte will be received & ack will be send
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT  )));
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <nack+0x4>
	while((TWSR & 0xF8)!=0x58);
 100:	81 b1       	in	r24, 0x01	; 1
 102:	88 7f       	andi	r24, 0xF8	; 248
 104:	88 35       	cpi	r24, 0x58	; 88
 106:	e1 f7       	brne	.-8      	; 0x100 <nack+0xa>
	return(TWDR);
 108:	83 b1       	in	r24, 0x03	; 3
}
 10a:	08 95       	ret

0000010c <set_time>:
void set_time(uint8_t ss,uint8_t mm,uint8_t hh)
{
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	18 2f       	mov	r17, r24
 114:	d6 2f       	mov	r29, r22
 116:	c4 2f       	mov	r28, r20
	start_comm();
 118:	0e 94 3e 00 	call	0x7c	; 0x7c <start_comm>
	mt_mode();
 11c:	0e 94 58 00 	call	0xb0	; 0xb0 <mt_mode>
	data_transmision(0x00);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 65 00 	call	0xca	; 0xca <data_transmision>
	data_transmision(ss);
 126:	81 2f       	mov	r24, r17
 128:	0e 94 65 00 	call	0xca	; 0xca <data_transmision>
	data_transmision(mm);
 12c:	8d 2f       	mov	r24, r29
 12e:	0e 94 65 00 	call	0xca	; 0xca <data_transmision>
	data_transmision(hh);
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 65 00 	call	0xca	; 0xca <data_transmision>
	while ( ! (TWCR & ( 1<< TWINT )));
	while(( TWSR & 0xF8) != 0x28) ;
}
void stop_comm()
{
	TWCR = ( 1<< TWINT ) | ( 1<< TWEN ) |( 1<< TWSTO ) ;
 138:	84 e9       	ldi	r24, 0x94	; 148
 13a:	86 bf       	out	0x36, r24	; 54
	data_transmision(0x00);
	data_transmision(ss);
	data_transmision(mm);
	data_transmision(hh);
	stop_comm();
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	08 95       	ret

00000144 <get_time>:
void get_time(void)
{ start_comm();
 144:	cf 93       	push	r28
 146:	0e 94 3e 00 	call	0x7c	; 0x7c <start_comm>
	mt_mode();
 14a:	0e 94 58 00 	call	0xb0	; 0xb0 <mt_mode>
	data_transmision(0x00);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 65 00 	call	0xca	; 0xca <data_transmision>
	while ( ! (TWCR & ( 1<< TWINT )));
	while(( TWSR & 0xF8) != 0x28) ;
}
void stop_comm()
{
	TWCR = ( 1<< TWINT ) | ( 1<< TWEN ) |( 1<< TWSTO ) ;
 154:	c4 e9       	ldi	r28, 0x94	; 148
 156:	c6 bf       	out	0x36, r28	; 54
void get_time(void)
{ start_comm();
	mt_mode();
	data_transmision(0x00);
	stop_comm();
	start_comm();
 158:	0e 94 3e 00 	call	0x7c	; 0x7c <start_comm>
	mr_mode();
 15c:	0e 94 4c 00 	call	0x98	; 0x98 <mr_mode>
	ss=data_reception(); //seconds
 160:	0e 94 70 00 	call	0xe0	; 0xe0 <data_reception>
 164:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ss>
	mm=data_reception(); //minutes
 168:	0e 94 70 00 	call	0xe0	; 0xe0 <data_reception>
 16c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	hh=nack(); //hours
 170:	0e 94 7b 00 	call	0xf6	; 0xf6 <nack>
 174:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <hh>
	while ( ! (TWCR & ( 1<< TWINT )));
	while(( TWSR & 0xF8) != 0x28) ;
}
void stop_comm()
{
	TWCR = ( 1<< TWINT ) | ( 1<< TWEN ) |( 1<< TWSTO ) ;
 178:	c6 bf       	out	0x36, r28	; 54
	mr_mode();
	ss=data_reception(); //seconds
	mm=data_reception(); //minutes
	hh=nack(); //hours
	stop_comm();
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <main>:
int main(void)
{
	DDRA=0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
 182:	87 bb       	out	0x17, r24	; 23
	PORTA=0xF0;
 184:	80 ef       	ldi	r24, 0xF0	; 240
 186:	8b bb       	out	0x1b, r24	; 27
	set_time(0x00,0x59,0x01); //you can set initial time accordingly.
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	69 e5       	ldi	r22, 0x59	; 89
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 86 00 	call	0x10c	; 0x10c <set_time>
	while(1)
	{
		get_time();
 192:	0e 94 a2 00 	call	0x144	; 0x144 <get_time>
		PORTA &=~(1<<PA0);
 196:	d8 98       	cbi	0x1b, 0	; 27
		PORTB=ss;
 198:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ss>
 19c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	83 ef       	ldi	r24, 0xF3	; 243
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x24>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x2a>
 1a8:	00 00       	nop
		_delay_us(2000);
		PORTA|=1<<PA0;
 1aa:	d8 9a       	sbi	0x1b, 0	; 27
 1ac:	83 ef       	ldi	r24, 0xF3	; 243
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x32>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x38>
 1b6:	00 00       	nop
		_delay_us(2000);
		PORTA &=~(1<<PA1);
 1b8:	d9 98       	cbi	0x1b, 1	; 27
		PORTB=ss>>4;
 1ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ss>
 1be:	82 95       	swap	r24
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	83 ef       	ldi	r24, 0xF3	; 243
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x4a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x50>
 1ce:	00 00       	nop
		_delay_us(2000);
		PORTA|=1<<PA1;
 1d0:	d9 9a       	sbi	0x1b, 1	; 27
 1d2:	83 ef       	ldi	r24, 0xF3	; 243
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x58>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x5e>
 1dc:	00 00       	nop
		_delay_us(2000);
		PORTA &=~(1<<PA2);
 1de:	da 98       	cbi	0x1b, 2	; 27
		PORTB=mm;
 1e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	83 ef       	ldi	r24, 0xF3	; 243
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x6c>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x72>
 1f0:	00 00       	nop
		_delay_us(2000);
		PORTA|=1<<PA2;
 1f2:	da 9a       	sbi	0x1b, 2	; 27
 1f4:	83 ef       	ldi	r24, 0xF3	; 243
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x7a>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x80>
 1fe:	00 00       	nop
		_delay_us(2000);
		PORTA &=~(1<<PA3);
 200:	db 98       	cbi	0x1b, 3	; 27
		PORTB= mm>>4;
 202:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 206:	82 95       	swap	r24
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	88 bb       	out	0x18, r24	; 24
 20c:	83 ef       	ldi	r24, 0xF3	; 243
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x92>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x98>
 216:	00 00       	nop
		_delay_us(2000);
		PORTA|=1<<PA3;
 218:	db 9a       	sbi	0x1b, 3	; 27
 21a:	83 ef       	ldi	r24, 0xF3	; 243
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0xa0>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0xa6>
 224:	00 00       	nop
		_delay_us(2000);/////
		PORTA &=~(1<<PA4);
 226:	dc 98       	cbi	0x1b, 4	; 27
		PORTB=hh;
 228:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hh>
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	83 ef       	ldi	r24, 0xF3	; 243
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0xb4>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0xba>
 238:	00 00       	nop
		_delay_us(2000);
		PORTA|=1<<PA4;
 23a:	dc 9a       	sbi	0x1b, 4	; 27
 23c:	83 ef       	ldi	r24, 0xF3	; 243
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0xc2>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0xc8>
 246:	00 00       	nop
		_delay_us(2000);
		PORTA &=~(1<<PA5);
 248:	dd 98       	cbi	0x1b, 5	; 27
		PORTB=hh>>4;
 24a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hh>
 24e:	82 95       	swap	r24
 250:	8f 70       	andi	r24, 0x0F	; 15
 252:	88 bb       	out	0x18, r24	; 24
 254:	83 ef       	ldi	r24, 0xF3	; 243
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0xda>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0xe0>
 25e:	00 00       	nop
		_delay_us(2000);
		PORTA|=1<<PA5;
 260:	dd 9a       	sbi	0x1b, 5	; 27
 262:	83 ef       	ldi	r24, 0xF3	; 243
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0xe8>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0xee>
 26c:	00 00       	nop
 26e:	91 cf       	rjmp	.-222    	; 0x192 <main+0x14>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
