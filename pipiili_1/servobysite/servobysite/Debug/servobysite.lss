
servobysite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000635  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRD |= 0xFF;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0 | 1<<COM1B1 | 1<<COM1B0 ;
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	82 6f       	ori	r24, 0xF2	; 242
  76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS10;
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	89 61       	ori	r24, 0x19	; 25
  7c:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
  7e:	8f e1       	ldi	r24, 0x1F	; 31
  80:	9e e4       	ldi	r25, 0x4E	; 78
  82:	97 bd       	out	0x27, r25	; 39
  84:	86 bd       	out	0x26, r24	; 38

	//OCR1A = ICR1 - 2000; //18000

	while (1)
	{
		OCR1A = 19100;
  86:	2c e9       	ldi	r18, 0x9C	; 156
  88:	3a e4       	ldi	r19, 0x4A	; 74
		OCR1B = 19100;
		_delay_ms(1000);
		/*OCR1A = 18300;
		OCR1B = 18300;
		_delay_ms(1000);*/
		OCR1A = 17800;
  8a:	88 e8       	ldi	r24, 0x88	; 136
  8c:	95 e4       	ldi	r25, 0x45	; 69

	//OCR1A = ICR1 - 2000; //18000

	while (1)
	{
		OCR1A = 19100;
  8e:	3b bd       	out	0x2b, r19	; 43
  90:	2a bd       	out	0x2a, r18	; 42
		OCR1B = 19100;
  92:	39 bd       	out	0x29, r19	; 41
  94:	28 bd       	out	0x28, r18	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	4f e3       	ldi	r20, 0x3F	; 63
  98:	5d e0       	ldi	r21, 0x0D	; 13
  9a:	63 e0       	ldi	r22, 0x03	; 3
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	50 40       	sbci	r21, 0x00	; 0
  a0:	60 40       	sbci	r22, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
		_delay_ms(1000);
		/*OCR1A = 18300;
		OCR1B = 18300;
		_delay_ms(1000);*/
		OCR1A = 17800;
  a8:	9b bd       	out	0x2b, r25	; 43
  aa:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 17800;
  ac:	99 bd       	out	0x29, r25	; 41
  ae:	88 bd       	out	0x28, r24	; 40
  b0:	4f e3       	ldi	r20, 0x3F	; 63
  b2:	5d e0       	ldi	r21, 0x0D	; 13
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	41 50       	subi	r20, 0x01	; 1
  b8:	50 40       	sbci	r21, 0x00	; 0
  ba:	60 40       	sbci	r22, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
  c2:	e5 cf       	rjmp	.-54     	; 0x8e <main+0x22>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
